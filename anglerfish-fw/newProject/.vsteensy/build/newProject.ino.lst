
C:\Users\iikus\source\newProject\.vsteensy\build/newProject.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 ed 04 00 00 a5 04 00 00     ... ............
      10:	a5 04 00 00 a5 04 00 00 a5 04 00 00 a5 04 00 00     ................
      20:	a5 04 00 00 a5 04 00 00 a5 04 00 00 ed 04 00 00     ................
      30:	ed 04 00 00 a5 04 00 00 e9 15 00 00 ed 16 00 00     ................
      40:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      50:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      60:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      70:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      80:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      90:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      a0:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      b0:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      c0:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      d0:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      e0:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
      f0:	ed 04 00 00 a9 18 00 00 ed 04 00 00 d5 19 00 00     ................
     100:	ed 04 00 00 01 1b 00 00 ed 04 00 00 ed 04 00 00     ................
     110:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
     120:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
     130:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
     140:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
     150:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
     160:	ed 04 00 00 75 08 00 00 ed 04 00 00 ed 04 00 00     ....u...........
     170:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
     180:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
     190:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
     1a0:	ed 04 00 00 ed 04 00 00 ed 04 00 00 ed 04 00 00     ................
     1b0:	ed 04 00 00 ed 04 00 00 ed 04 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f000 f990 	bl	4f4 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f000 f9b8 	bl	648 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f000 f94b 	bl	57c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f000 f93c 	bl	57c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f001 fcd6 	bl	1cb8 <__libc_init_array>

	startup_late_hook();
     30c:	f000 f8f8 	bl	500 <startup_late_hook>
	main();
     310:	f001 f9f4 	bl	16fc <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8bf8 	.word	0x1fff8bf8
     33c:	00001f74 	.word	0x00001f74
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8bf8 	.word	0x1fff8bf8
     348:	1fff8ed0 	.word	0x1fff8ed0
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5fe86296 	.word	0x5fe86296
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8bf8 	.word	0x1fff8bf8
     42c:	00000000 	.word	0x00000000
     430:	00001f78 	.word	0x00001f78

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8bfc 	.word	0x1fff8bfc
     460:	00001f78 	.word	0x00001f78
     464:	1fff8bf8 	.word	0x1fff8bf8
     468:	00000000 	.word	0x00000000

0000046c <setup>:
void setup()
{
  pinMode(LED_BUILTIN,OUTPUT);
     46c:	2101      	movs	r1, #1
     46e:	200d      	movs	r0, #13
     470:	f000 b896 	b.w	5a0 <pinMode>

00000474 <loop>:
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
     474:	4b08      	ldr	r3, [pc, #32]	; (498 <loop+0x24>)
     476:	681b      	ldr	r3, [r3, #0]
     478:	069b      	lsls	r3, r3, #26
     47a:	d406      	bmi.n	48a <loop+0x16>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     47c:	4b07      	ldr	r3, [pc, #28]	; (49c <loop+0x28>)
     47e:	2220      	movs	r2, #32
     480:	601a      	str	r2, [r3, #0]
}

void loop()
{
  digitalWriteFast(LED_BUILTIN,!digitalReadFast(LED_BUILTIN));
  delay(1000);
     482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     486:	f000 b891 	b.w	5ac <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     48a:	4b05      	ldr	r3, [pc, #20]	; (4a0 <loop+0x2c>)
     48c:	2220      	movs	r2, #32
     48e:	601a      	str	r2, [r3, #0]
     490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     494:	f000 b88a 	b.w	5ac <delay>
     498:	400ff090 	.word	0x400ff090
     49c:	400ff084 	.word	0x400ff084
     4a0:	400ff088 	.word	0x400ff088

000004a4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
     4a4:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
     4a6:	4c10      	ldr	r4, [pc, #64]	; (4e8 <fault_isr+0x44>)
     4a8:	e008      	b.n	4bc <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
     4aa:	6823      	ldr	r3, [r4, #0]
     4ac:	0559      	lsls	r1, r3, #21
     4ae:	d40d      	bmi.n	4cc <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
     4b0:	6823      	ldr	r3, [r4, #0]
     4b2:	051a      	lsls	r2, r3, #20
     4b4:	d40f      	bmi.n	4d6 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
     4b6:	6823      	ldr	r3, [r4, #0]
     4b8:	04db      	lsls	r3, r3, #19
     4ba:	d411      	bmi.n	4e0 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
     4bc:	6823      	ldr	r3, [r4, #0]
     4be:	0358      	lsls	r0, r3, #13
     4c0:	d5f3      	bpl.n	4aa <fault_isr+0x6>
     4c2:	f000 f9d7 	bl	874 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
     4c6:	6823      	ldr	r3, [r4, #0]
     4c8:	0559      	lsls	r1, r3, #21
     4ca:	d5f1      	bpl.n	4b0 <fault_isr+0xc>
     4cc:	f001 f9ec 	bl	18a8 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
     4d0:	6823      	ldr	r3, [r4, #0]
     4d2:	051a      	lsls	r2, r3, #20
     4d4:	d5ef      	bpl.n	4b6 <fault_isr+0x12>
     4d6:	f001 fa7d 	bl	19d4 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
     4da:	6823      	ldr	r3, [r4, #0]
     4dc:	04db      	lsls	r3, r3, #19
     4de:	d5ed      	bpl.n	4bc <fault_isr+0x18>
     4e0:	f001 fb0e 	bl	1b00 <uart2_status_isr>
     4e4:	e7ea      	b.n	4bc <fault_isr+0x18>
     4e6:	bf00      	nop
     4e8:	40048034 	.word	0x40048034

000004ec <unused_isr>:
	}
}

void unused_isr(void)
{
     4ec:	b508      	push	{r3, lr}
	fault_isr();
     4ee:	f7ff ffd9 	bl	4a4 <fault_isr>
     4f2:	bf00      	nop

000004f4 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
     4f4:	4b01      	ldr	r3, [pc, #4]	; (4fc <startup_early_hook+0x8>)
     4f6:	2210      	movs	r2, #16
     4f8:	801a      	strh	r2, [r3, #0]
     4fa:	4770      	bx	lr
     4fc:	40052000 	.word	0x40052000

00000500 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
     500:	4770      	bx	lr
     502:	bf00      	nop

00000504 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
     504:	4a1c      	ldr	r2, [pc, #112]	; (578 <pinMode.part.2+0x74>)
     506:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     50a:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
     50c:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     50e:	d011      	beq.n	534 <pinMode.part.2+0x30>
     510:	2904      	cmp	r1, #4
     512:	d01b      	beq.n	54c <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
     514:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
     518:	2200      	movs	r2, #0
     51a:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
     51e:	b129      	cbz	r1, 52c <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
     520:	2902      	cmp	r1, #2
     522:	d020      	beq.n	566 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
     524:	2903      	cmp	r1, #3
     526:	d022      	beq.n	56e <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
     528:	601a      	str	r2, [r3, #0]
     52a:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
     52c:	f44f 7280 	mov.w	r2, #256	; 0x100
     530:	601a      	str	r2, [r3, #0]
     532:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
     534:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     538:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
     53c:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     540:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
     542:	681a      	ldr	r2, [r3, #0]
     544:	f022 0220 	bic.w	r2, r2, #32
     548:	601a      	str	r2, [r3, #0]
     54a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
     54c:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     550:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
     554:	2001      	movs	r0, #1
     556:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     55a:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
     55c:	681a      	ldr	r2, [r3, #0]
     55e:	f042 0220 	orr.w	r2, r2, #32
     562:	601a      	str	r2, [r3, #0]
     564:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
     566:	f240 1203 	movw	r2, #259	; 0x103
     56a:	601a      	str	r2, [r3, #0]
     56c:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
     56e:	f44f 7281 	mov.w	r2, #258	; 0x102
     572:	601a      	str	r2, [r3, #0]
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	00001df4 	.word	0x00001df4

0000057c <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
     57c:	b430      	push	{r4, r5}
	RTC_SR = 0;
     57e:	4b05      	ldr	r3, [pc, #20]	; (594 <rtc_set+0x18>)
	RTC_TPR = 0;
     580:	4d05      	ldr	r5, [pc, #20]	; (598 <rtc_set+0x1c>)
	RTC_TSR = t;
     582:	4c06      	ldr	r4, [pc, #24]	; (59c <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
     584:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
     586:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
     588:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
     58a:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
     58c:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
     58e:	6019      	str	r1, [r3, #0]
}
     590:	bc30      	pop	{r4, r5}
     592:	4770      	bx	lr
     594:	4003d014 	.word	0x4003d014
     598:	4003d004 	.word	0x4003d004
     59c:	4003d000 	.word	0x4003d000

000005a0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
     5a0:	2821      	cmp	r0, #33	; 0x21
     5a2:	d801      	bhi.n	5a8 <pinMode+0x8>
     5a4:	f7ff bfae 	b.w	504 <pinMode.part.2>
     5a8:	4770      	bx	lr
     5aa:	bf00      	nop

000005ac <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
     5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     5b0:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
     5b2:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
     5b4:	4f20      	ldr	r7, [pc, #128]	; (638 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
     5b6:	4b21      	ldr	r3, [pc, #132]	; (63c <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
     5b8:	4a21      	ldr	r2, [pc, #132]	; (640 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
     5ba:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
     5bc:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
     5be:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
     5c0:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
     5c2:	0152      	lsls	r2, r2, #5
     5c4:	d502      	bpl.n	5cc <delay+0x20>
     5c6:	2b32      	cmp	r3, #50	; 0x32
     5c8:	bf88      	it	hi
     5ca:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
     5cc:	b395      	cbz	r5, 634 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
     5ce:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
     5d2:	4e1c      	ldr	r6, [pc, #112]	; (644 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
     5d4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 63c <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
     5d8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 640 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
     5dc:	33ff      	adds	r3, #255	; 0xff
     5de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     5e2:	fba6 1303 	umull	r1, r3, r6, r3
     5e6:	fb02 f404 	mul.w	r4, r2, r4
     5ea:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
     5ee:	b672      	cpsid	i
	current = SYST_CVR;
     5f0:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
     5f4:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
     5f6:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
     5fa:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
     5fc:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
     600:	33ff      	adds	r3, #255	; 0xff
     602:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
     606:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
     60a:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
     60e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
     612:	d002      	beq.n	61a <delay+0x6e>
     614:	2932      	cmp	r1, #50	; 0x32
     616:	bf88      	it	hi
     618:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
     61a:	fb00 3302 	mla	r3, r0, r2, r3
     61e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     622:	d304      	bcc.n	62e <delay+0x82>
				ms--;
				if (ms == 0) return;
     624:	3d01      	subs	r5, #1
     626:	d005      	beq.n	634 <delay+0x88>
				start += 1000;
     628:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
     62c:	e7df      	b.n	5ee <delay+0x42>
			}
			yield();
     62e:	f001 f86d 	bl	170c <yield>
		}
     632:	e7dc      	b.n	5ee <delay+0x42>
     634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     638:	1fff8c14 	.word	0x1fff8c14
     63c:	e000e018 	.word	0xe000e018
     640:	e000ed04 	.word	0xe000ed04
     644:	aaaaaaab 	.word	0xaaaaaaab

00000648 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
     648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
     64a:	4b2d      	ldr	r3, [pc, #180]	; (700 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
     64c:	492d      	ldr	r1, [pc, #180]	; (704 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
     64e:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 720 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
     652:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 724 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
     656:	4e2c      	ldr	r6, [pc, #176]	; (708 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
     658:	4d2c      	ldr	r5, [pc, #176]	; (70c <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
     65a:	4c2d      	ldr	r4, [pc, #180]	; (710 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
     65c:	4a2d      	ldr	r2, [pc, #180]	; (714 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
     65e:	4f2e      	ldr	r7, [pc, #184]	; (718 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
     660:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
     664:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
     666:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
     66a:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
     66c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
     670:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
     672:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
     676:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
     678:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
     67c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
     67e:	2000      	movs	r0, #0
     680:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
     682:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
     684:	f64b 71ff 	movw	r1, #49151	; 0xbfff
     688:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
     68c:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
     690:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
     692:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
     694:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
     696:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
     698:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
     69a:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
     69c:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     69e:	2209      	movs	r2, #9
     6a0:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
     6a4:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
     6a8:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
     6ac:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
     6b0:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
     6b4:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
     6b8:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
     6bc:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
     6be:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     6c2:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
     6c6:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
     6ca:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
     6ce:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
     6d0:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     6d4:	4811      	ldr	r0, [pc, #68]	; (71c <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
     6d6:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
     6d8:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
     6dc:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
     6e0:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
     6e2:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     6e4:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
     6e6:	f001 f85f 	bl	17a8 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
     6ea:	2019      	movs	r0, #25
     6ec:	f7ff ff5e 	bl	5ac <delay>
	usb_init();
     6f0:	f000 fe28 	bl	1344 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
     6f4:	f240 1013 	movw	r0, #275	; 0x113
}
     6f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
     6fc:	f7ff bf56 	b.w	5ac <delay>
     700:	e000e108 	.word	0xe000e108
     704:	40038004 	.word	0x40038004
     708:	40038014 	.word	0x40038014
     70c:	40038024 	.word	0x40038024
     710:	4003802c 	.word	0x4003802c
     714:	4003801c 	.word	0x4003801c
     718:	40038034 	.word	0x40038034
     71c:	400b8000 	.word	0x400b8000
     720:	4003800c 	.word	0x4003800c
     724:	40038008 	.word	0x40038008

00000728 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
     728:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
     72a:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
     72c:	4a2b      	ldr	r2, [pc, #172]	; (7dc <usb_rx_memory+0xb4>)
     72e:	7813      	ldrb	r3, [r2, #0]
     730:	071d      	lsls	r5, r3, #28
     732:	d506      	bpl.n	742 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
     734:	4b2a      	ldr	r3, [pc, #168]	; (7e0 <usb_rx_memory+0xb8>)
     736:	6a19      	ldr	r1, [r3, #32]
     738:	2900      	cmp	r1, #0
     73a:	d036      	beq.n	7aa <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     73c:	6a99      	ldr	r1, [r3, #40]	; 0x28
     73e:	2900      	cmp	r1, #0
     740:	d041      	beq.n	7c6 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
     742:	7853      	ldrb	r3, [r2, #1]
     744:	071c      	lsls	r4, r3, #28
     746:	d506      	bpl.n	756 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
     748:	4b25      	ldr	r3, [pc, #148]	; (7e0 <usb_rx_memory+0xb8>)
     74a:	6c19      	ldr	r1, [r3, #64]	; 0x40
     74c:	2900      	cmp	r1, #0
     74e:	d03e      	beq.n	7ce <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     750:	6c99      	ldr	r1, [r3, #72]	; 0x48
     752:	2900      	cmp	r1, #0
     754:	d039      	beq.n	7ca <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
     756:	7893      	ldrb	r3, [r2, #2]
     758:	0719      	lsls	r1, r3, #28
     75a:	d505      	bpl.n	768 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
     75c:	4b20      	ldr	r3, [pc, #128]	; (7e0 <usb_rx_memory+0xb8>)
     75e:	6e19      	ldr	r1, [r3, #96]	; 0x60
     760:	2900      	cmp	r1, #0
     762:	d036      	beq.n	7d2 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     764:	6e99      	ldr	r1, [r3, #104]	; 0x68
     766:	b189      	cbz	r1, 78c <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
     768:	78d3      	ldrb	r3, [r2, #3]
     76a:	071b      	lsls	r3, r3, #28
     76c:	d507      	bpl.n	77e <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
     76e:	4b1c      	ldr	r3, [pc, #112]	; (7e0 <usb_rx_memory+0xb8>)
     770:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
     774:	b37a      	cbz	r2, 7d6 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     776:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     77a:	2111      	movs	r1, #17
     77c:	b13a      	cbz	r2, 78e <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
     77e:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
     780:	4b18      	ldr	r3, [pc, #96]	; (7e4 <usb_rx_memory+0xbc>)
     782:	2200      	movs	r2, #0
     784:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
     786:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
     788:	f000 be68 	b.w	145c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     78c:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
     78e:	4c15      	ldr	r4, [pc, #84]	; (7e4 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
     790:	4d15      	ldr	r5, [pc, #84]	; (7e8 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
     792:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
     794:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
     798:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     79c:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
     79e:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
     7a0:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
     7a2:	7022      	strb	r2, [r4, #0]
				__enable_irq();
     7a4:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
     7a6:	bc30      	pop	{r4, r5}
     7a8:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
     7aa:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
     7ac:	4c0d      	ldr	r4, [pc, #52]	; (7e4 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
     7ae:	4d0f      	ldr	r5, [pc, #60]	; (7ec <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
     7b0:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
     7b2:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
     7b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     7ba:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
     7bc:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
     7be:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
     7c0:	7022      	strb	r2, [r4, #0]
				__enable_irq();
     7c2:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
     7c4:	e7ef      	b.n	7a6 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     7c6:	2105      	movs	r1, #5
     7c8:	e7e1      	b.n	78e <usb_rx_memory+0x66>
     7ca:	2109      	movs	r1, #9
     7cc:	e7df      	b.n	78e <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
     7ce:	2208      	movs	r2, #8
     7d0:	e7ec      	b.n	7ac <usb_rx_memory+0x84>
     7d2:	220c      	movs	r2, #12
     7d4:	e7ea      	b.n	7ac <usb_rx_memory+0x84>
     7d6:	2210      	movs	r2, #16
     7d8:	e7e8      	b.n	7ac <usb_rx_memory+0x84>
     7da:	bf00      	nop
     7dc:	00001f04 	.word	0x00001f04
     7e0:	1fff8000 	.word	0x1fff8000
     7e4:	1fff8ced 	.word	0x1fff8ced
     7e8:	004000c8 	.word	0x004000c8
     7ec:	00400088 	.word	0x00400088

000007f0 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
     7f0:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
     7f2:	2b03      	cmp	r3, #3
     7f4:	d81d      	bhi.n	832 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
     7f6:	4a1b      	ldr	r2, [pc, #108]	; (864 <usb_tx+0x74>)
     7f8:	0140      	lsls	r0, r0, #5
     7fa:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
     7fe:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
     800:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
     802:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
     804:	4c18      	ldr	r4, [pc, #96]	; (868 <usb_tx+0x78>)
     806:	5ce2      	ldrb	r2, [r4, r3]
     808:	2a03      	cmp	r2, #3
     80a:	d81b      	bhi.n	844 <usb_tx+0x54>
     80c:	e8df f002 	tbb	[pc, r2]
     810:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
     814:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
     816:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
     818:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
     81a:	f010 0f08 	tst.w	r0, #8
     81e:	bf14      	ite	ne
     820:	23c8      	movne	r3, #200	; 0xc8
     822:	2388      	moveq	r3, #136	; 0x88
     824:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
     828:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
     82a:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
     82c:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
     82e:	b662      	cpsie	i
}
     830:	bc30      	pop	{r4, r5}
     832:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
     834:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
     836:	2202      	movs	r2, #2
		break;
     838:	e7ed      	b.n	816 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
     83a:	2205      	movs	r2, #5
     83c:	e7eb      	b.n	816 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
     83e:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
     840:	2204      	movs	r2, #4
		break;
     842:	e7e8      	b.n	816 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
     844:	4a09      	ldr	r2, [pc, #36]	; (86c <usb_tx+0x7c>)
     846:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     84a:	b138      	cbz	r0, 85c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
     84c:	4a08      	ldr	r2, [pc, #32]	; (870 <usb_tx+0x80>)
     84e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     852:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
     854:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
     858:	b662      	cpsie	i
		return;
     85a:	e7e9      	b.n	830 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
     85c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     860:	4a03      	ldr	r2, [pc, #12]	; (870 <usb_tx+0x80>)
     862:	e7f7      	b.n	854 <usb_tx+0x64>
     864:	1fff8000 	.word	0x1fff8000
     868:	1fff8cfc 	.word	0x1fff8cfc
     86c:	1fff8cc4 	.word	0x1fff8cc4
     870:	1fff8cd4 	.word	0x1fff8cd4

00000874 <usb_isr>:
}



void usb_isr(void)
{
     874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
     878:	f8df b30c 	ldr.w	fp, [pc, #780]	; b88 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
     87c:	f8df a30c 	ldr.w	sl, [pc, #780]	; b8c <usb_isr+0x318>
}



void usb_isr(void)
{
     880:	b087      	sub	sp, #28
     882:	e044      	b.n	90e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
     884:	4fab      	ldr	r7, [pc, #684]	; (b34 <usb_isr+0x2c0>)
     886:	ea4f 0893 	mov.w	r8, r3, lsr #2
     88a:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
     88e:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
     890:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
     894:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
     898:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
     89a:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
     89e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
     8a2:	2b00      	cmp	r3, #0
     8a4:	f040 8102 	bne.w	aac <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
     8a8:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
     8ac:	0c1b      	lsrs	r3, r3, #16
     8ae:	b299      	uxth	r1, r3
     8b0:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
     8b4:	2b00      	cmp	r3, #0
     8b6:	f000 80f0 	beq.w	a9a <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
     8ba:	4b9f      	ldr	r3, [pc, #636]	; (b38 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
     8bc:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
     8c0:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
     8c4:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
     8c8:	2a00      	cmp	r2, #0
     8ca:	f000 82c5 	beq.w	e58 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
     8ce:	4d9b      	ldr	r5, [pc, #620]	; (b3c <usb_isr+0x2c8>)
     8d0:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
     8d4:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
     8d6:	4c9a      	ldr	r4, [pc, #616]	; (b40 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
     8d8:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
     8dc:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
     8e0:	4419      	add	r1, r3
     8e2:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
     8e6:	f000 fd99 	bl	141c <usb_malloc>
					if (packet) {
     8ea:	2800      	cmp	r0, #0
     8ec:	f000 82ad 	beq.w	e4a <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
     8f0:	4a94      	ldr	r2, [pc, #592]	; (b44 <usb_isr+0x2d0>)
     8f2:	4b95      	ldr	r3, [pc, #596]	; (b48 <usb_isr+0x2d4>)
     8f4:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
     8f8:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
     8fc:	bf18      	it	ne
     8fe:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
     900:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
     904:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
     908:	2308      	movs	r3, #8
     90a:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
     90e:	f89b 4000 	ldrb.w	r4, [fp]
     912:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
     914:	0761      	lsls	r1, r4, #29
     916:	d51a      	bpl.n	94e <usb_isr+0xda>
		if (usb_configuration) {
     918:	4b8c      	ldr	r3, [pc, #560]	; (b4c <usb_isr+0x2d8>)
     91a:	781b      	ldrb	r3, [r3, #0]
     91c:	b1a3      	cbz	r3, 948 <usb_isr+0xd4>
			t = usb_reboot_timer;
     91e:	498c      	ldr	r1, [pc, #560]	; (b50 <usb_isr+0x2dc>)
     920:	780a      	ldrb	r2, [r1, #0]
			if (t) {
     922:	f002 03ff 	and.w	r3, r2, #255	; 0xff
     926:	b122      	cbz	r2, 932 <usb_isr+0xbe>
				usb_reboot_timer = --t;
     928:	3b01      	subs	r3, #1
     92a:	b2db      	uxtb	r3, r3
     92c:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
     92e:	b903      	cbnz	r3, 932 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
     930:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
     932:	4988      	ldr	r1, [pc, #544]	; (b54 <usb_isr+0x2e0>)
     934:	780a      	ldrb	r2, [r1, #0]
			if (t) {
     936:	f002 03ff 	and.w	r3, r2, #255	; 0xff
     93a:	b12a      	cbz	r2, 948 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
     93c:	3b01      	subs	r3, #1
     93e:	b2db      	uxtb	r3, r3
     940:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
     942:	2b00      	cmp	r3, #0
     944:	f000 8257 	beq.w	df6 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
     948:	2304      	movs	r3, #4
     94a:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
     94e:	f004 0308 	and.w	r3, r4, #8
     952:	f003 02ff 	and.w	r2, r3, #255	; 0xff
     956:	2b00      	cmp	r3, #0
     958:	f000 80cc 	beq.w	af4 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
     95c:	f89a 3000 	ldrb.w	r3, [sl]
     960:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
     962:	091e      	lsrs	r6, r3, #4
     964:	d18e      	bne.n	884 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
     966:	089c      	lsrs	r4, r3, #2
     968:	f8df 91c8 	ldr.w	r9, [pc, #456]	; b34 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
     96c:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
     970:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
     974:	f3c2 0283 	ubfx	r2, r2, #2, #4
     978:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
     97a:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
     97c:	2a0c      	cmp	r2, #12
     97e:	f200 8088 	bhi.w	a92 <usb_isr+0x21e>
     982:	e8df f002 	tbb	[pc, r2]
     986:	7c7c      	.short	0x7c7c
     988:	86868686 	.word	0x86868686
     98c:	86478686 	.word	0x86478686
     990:	8686      	.short	0x8686
     992:	07          	.byte	0x07
     993:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
     994:	6808      	ldr	r0, [r1, #0]
     996:	4d70      	ldr	r5, [pc, #448]	; (b58 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
     998:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
     99a:	4f70      	ldr	r7, [pc, #448]	; (b5c <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
     99c:	4e70      	ldr	r6, [pc, #448]	; (b60 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
     99e:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
     9a0:	b281      	uxth	r1, r0
     9a2:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
     9a6:	4b67      	ldr	r3, [pc, #412]	; (b44 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
     9a8:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
     9aa:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
     9ae:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
     9b0:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
     9b2:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
     9b6:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
     9b8:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
     9bc:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
     9c0:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
     9c4:	4c5b      	ldr	r4, [pc, #364]	; (b34 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
     9c6:	f200 80e3 	bhi.w	b90 <usb_isr+0x31c>
     9ca:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
     9ce:	f080 8346 	bcs.w	105e <usb_isr+0x7ea>
     9d2:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
     9d6:	f000 82fc 	beq.w	fd2 <usb_isr+0x75e>
     9da:	f200 828d 	bhi.w	ef8 <usb_isr+0x684>
     9de:	2980      	cmp	r1, #128	; 0x80
     9e0:	f000 8377 	beq.w	10d2 <usb_isr+0x85e>
     9e4:	2982      	cmp	r1, #130	; 0x82
     9e6:	f040 82fa 	bne.w	fde <usb_isr+0x76a>
     9ea:	88a9      	ldrh	r1, [r5, #4]
     9ec:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
     9f0:	2904      	cmp	r1, #4
     9f2:	f200 82f4 	bhi.w	fde <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
     9f6:	485b      	ldr	r0, [pc, #364]	; (b64 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
     9f8:	4c5b      	ldr	r4, [pc, #364]	; (b68 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
     9fa:	0089      	lsls	r1, r1, #2
     9fc:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
     9fe:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
     a00:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
     a02:	7802      	ldrb	r2, [r0, #0]
     a04:	0793      	lsls	r3, r2, #30
     a06:	f140 8458 	bpl.w	12ba <usb_isr+0xa46>
     a0a:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
     a0e:	f04f 0e02 	mov.w	lr, #2
     a12:	e342      	b.n	109a <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
     a14:	4f51      	ldr	r7, [pc, #324]	; (b5c <usb_isr+0x2e8>)
     a16:	683a      	ldr	r2, [r7, #0]
		if (data) {
     a18:	b332      	cbz	r2, a68 <usb_isr+0x1f4>
			size = ep0_tx_len;
     a1a:	4b54      	ldr	r3, [pc, #336]	; (b6c <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     a1c:	4e50      	ldr	r6, [pc, #320]	; (b60 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     a1e:	4954      	ldr	r1, [pc, #336]	; (b70 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
     a20:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     a22:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     a24:	780d      	ldrb	r5, [r1, #0]
     a26:	2840      	cmp	r0, #64	; 0x40
     a28:	4686      	mov	lr, r0
     a2a:	f045 0802 	orr.w	r8, r5, #2
     a2e:	bf28      	it	cs
     a30:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     a34:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
     a36:	f084 0401 	eor.w	r4, r4, #1
     a3a:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
     a3c:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     a40:	bf0c      	ite	eq
     a42:	2488      	moveq	r4, #136	; 0x88
     a44:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     a46:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
     a4a:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
     a4c:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     a50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     a54:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
     a56:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     a58:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
     a5c:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
     a5e:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
     a60:	2800      	cmp	r0, #0
     a62:	f000 8145 	beq.w	cf0 <usb_isr+0x47c>
     a66:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
     a68:	4b3b      	ldr	r3, [pc, #236]	; (b58 <usb_isr+0x2e4>)
     a6a:	881a      	ldrh	r2, [r3, #0]
     a6c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
     a70:	d10f      	bne.n	a92 <usb_isr+0x21e>
			setup.bRequest = 0;
     a72:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
     a74:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
     a76:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
     a78:	4b3e      	ldr	r3, [pc, #248]	; (b74 <usb_isr+0x300>)
     a7a:	701a      	strb	r2, [r3, #0]
     a7c:	e009      	b.n	a92 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
     a7e:	4a36      	ldr	r2, [pc, #216]	; (b58 <usb_isr+0x2e4>)
     a80:	8810      	ldrh	r0, [r2, #0]
     a82:	f242 0221 	movw	r2, #8225	; 0x2021
     a86:	4290      	cmp	r0, r2
     a88:	f000 8137 	beq.w	cfa <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
     a8c:	4a2d      	ldr	r2, [pc, #180]	; (b44 <usb_isr+0x2d0>)
     a8e:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
     a92:	4a39      	ldr	r2, [pc, #228]	; (b78 <usb_isr+0x304>)
     a94:	2301      	movs	r3, #1
     a96:	7013      	strb	r3, [r2, #0]
     a98:	e736      	b.n	908 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
     a9a:	4a2a      	ldr	r2, [pc, #168]	; (b44 <usb_isr+0x2d0>)
     a9c:	4b2a      	ldr	r3, [pc, #168]	; (b48 <usb_isr+0x2d4>)
     a9e:	f019 0f08 	tst.w	r9, #8
     aa2:	bf18      	it	ne
     aa4:	4613      	movne	r3, r2
     aa6:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
     aaa:	e72d      	b.n	908 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
     aac:	f000 fcd6 	bl	145c <usb_free>
				packet = tx_first[endpoint];
     ab0:	4a32      	ldr	r2, [pc, #200]	; (b7c <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
     ab2:	4933      	ldr	r1, [pc, #204]	; (b80 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
     ab4:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
     ab8:	2b00      	cmp	r3, #0
     aba:	f000 81d1 	beq.w	e60 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
     abe:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
     ac0:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
     ac2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
     ac6:	f103 0208 	add.w	r2, r3, #8
     aca:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
     ace:	2c03      	cmp	r4, #3
     ad0:	d805      	bhi.n	ade <usb_isr+0x26a>
     ad2:	e8df f004 	tbb	[pc, r4]
     ad6:	022c      	.short	0x022c
     ad8:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
     ada:	2202      	movs	r2, #2
     adc:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
     ade:	881a      	ldrh	r2, [r3, #0]
     ae0:	f019 0f08 	tst.w	r9, #8
     ae4:	bf0c      	ite	eq
     ae6:	2388      	moveq	r3, #136	; 0x88
     ae8:	23c8      	movne	r3, #200	; 0xc8
     aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     aee:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
     af2:	e709      	b.n	908 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
     af4:	07e0      	lsls	r0, r4, #31
     af6:	f100 8181 	bmi.w	dfc <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
     afa:	0621      	lsls	r1, r4, #24
     afc:	f100 81f2 	bmi.w	ee4 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
     b00:	07a2      	lsls	r2, r4, #30
     b02:	d506      	bpl.n	b12 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
     b04:	4a1f      	ldr	r2, [pc, #124]	; (b84 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
     b06:	4920      	ldr	r1, [pc, #128]	; (b88 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
     b08:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
     b0a:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
     b0c:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
     b0e:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
     b10:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
     b12:	06e3      	lsls	r3, r4, #27
     b14:	d502      	bpl.n	b1c <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
     b16:	4b1c      	ldr	r3, [pc, #112]	; (b88 <usb_isr+0x314>)
     b18:	2210      	movs	r2, #16
     b1a:	701a      	strb	r2, [r3, #0]
	}

}
     b1c:	b007      	add	sp, #28
     b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
     b22:	2204      	movs	r2, #4
     b24:	558a      	strb	r2, [r1, r6]
						break;
     b26:	e7da      	b.n	ade <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
     b28:	2205      	movs	r2, #5
     b2a:	558a      	strb	r2, [r1, r6]
						break;
     b2c:	e7d7      	b.n	ade <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
     b2e:	2203      	movs	r2, #3
     b30:	558a      	strb	r2, [r1, r6]
						break;
     b32:	e7d4      	b.n	ade <usb_isr+0x26a>
     b34:	1fff8000 	.word	0x1fff8000
     b38:	1fff8c70 	.word	0x1fff8c70
     b3c:	1fff8c1c 	.word	0x1fff8c1c
     b40:	1fff8ebc 	.word	0x1fff8ebc
     b44:	004000c8 	.word	0x004000c8
     b48:	00400088 	.word	0x00400088
     b4c:	1fff8cf8 	.word	0x1fff8cf8
     b50:	1fff8c81 	.word	0x1fff8c81
     b54:	1fff8d00 	.word	0x1fff8d00
     b58:	1fff8ce4 	.word	0x1fff8ce4
     b5c:	1fff8c18 	.word	0x1fff8c18
     b60:	1fff8c80 	.word	0x1fff8c80
     b64:	400720c0 	.word	0x400720c0
     b68:	1fff8cf0 	.word	0x1fff8cf0
     b6c:	1fff8c2c 	.word	0x1fff8c2c
     b70:	1fff8cec 	.word	0x1fff8cec
     b74:	40072098 	.word	0x40072098
     b78:	40072094 	.word	0x40072094
     b7c:	1fff8cc4 	.word	0x1fff8cc4
     b80:	1fff8cfc 	.word	0x1fff8cfc
     b84:	40072088 	.word	0x40072088
     b88:	40072080 	.word	0x40072080
     b8c:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
     b90:	f242 0021 	movw	r0, #8225	; 0x2021
     b94:	4281      	cmp	r1, r0
     b96:	f000 812a 	beq.w	dee <usb_isr+0x57a>
     b9a:	f200 80d8 	bhi.w	d4e <usb_isr+0x4da>
     b9e:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
     ba2:	f000 8276 	beq.w	1092 <usb_isr+0x81e>
     ba6:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
     baa:	f040 8218 	bne.w	fde <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
     bae:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
     bb0:	49b3      	ldr	r1, [pc, #716]	; (e80 <usb_isr+0x60c>)
     bb2:	78a8      	ldrb	r0, [r5, #2]
     bb4:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
     bb6:	0612      	lsls	r2, r2, #24
     bb8:	f100 833a 	bmi.w	1230 <usb_isr+0x9bc>
     bbc:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
     bc0:	49b0      	ldr	r1, [pc, #704]	; (e84 <usb_isr+0x610>)
     bc2:	0613      	lsls	r3, r2, #24
     bc4:	f100 830c 	bmi.w	11e0 <usb_isr+0x96c>
     bc8:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
     bcc:	49ad      	ldr	r1, [pc, #692]	; (e84 <usb_isr+0x610>)
     bce:	0615      	lsls	r5, r2, #24
     bd0:	f100 8301 	bmi.w	11d6 <usb_isr+0x962>
     bd4:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
     bd8:	49aa      	ldr	r1, [pc, #680]	; (e84 <usb_isr+0x610>)
     bda:	0614      	lsls	r4, r2, #24
     bdc:	f100 82f6 	bmi.w	11cc <usb_isr+0x958>
     be0:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
     be4:	49a7      	ldr	r1, [pc, #668]	; (e84 <usb_isr+0x610>)
     be6:	0610      	lsls	r0, r2, #24
     be8:	f100 834a 	bmi.w	1280 <usb_isr+0xa0c>
     bec:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
     bf0:	49a4      	ldr	r1, [pc, #656]	; (e84 <usb_isr+0x610>)
     bf2:	0612      	lsls	r2, r2, #24
     bf4:	f100 833f 	bmi.w	1276 <usb_isr+0xa02>
     bf8:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
     bfc:	49a1      	ldr	r1, [pc, #644]	; (e84 <usb_isr+0x610>)
     bfe:	0613      	lsls	r3, r2, #24
     c00:	f100 8334 	bmi.w	126c <usb_isr+0x9f8>
     c04:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
     c08:	499e      	ldr	r1, [pc, #632]	; (e84 <usb_isr+0x610>)
     c0a:	0615      	lsls	r5, r2, #24
     c0c:	f100 8329 	bmi.w	1262 <usb_isr+0x9ee>
     c10:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
     c14:	499b      	ldr	r1, [pc, #620]	; (e84 <usb_isr+0x610>)
     c16:	0614      	lsls	r4, r2, #24
     c18:	f100 831e 	bmi.w	1258 <usb_isr+0x9e4>
     c1c:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
     c20:	4998      	ldr	r1, [pc, #608]	; (e84 <usb_isr+0x610>)
     c22:	0610      	lsls	r0, r2, #24
     c24:	f100 8313 	bmi.w	124e <usb_isr+0x9da>
     c28:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
     c2c:	4995      	ldr	r1, [pc, #596]	; (e84 <usb_isr+0x610>)
     c2e:	0612      	lsls	r2, r2, #24
     c30:	f100 8308 	bmi.w	1244 <usb_isr+0x9d0>
     c34:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
     c38:	4992      	ldr	r1, [pc, #584]	; (e84 <usb_isr+0x610>)
     c3a:	0613      	lsls	r3, r2, #24
     c3c:	f100 82fd 	bmi.w	123a <usb_isr+0x9c6>
     c40:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
     c44:	498f      	ldr	r1, [pc, #572]	; (e84 <usb_isr+0x610>)
     c46:	0615      	lsls	r5, r2, #24
     c48:	f100 8331 	bmi.w	12ae <usb_isr+0xa3a>
     c4c:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
     c50:	498c      	ldr	r1, [pc, #560]	; (e84 <usb_isr+0x610>)
     c52:	0614      	lsls	r4, r2, #24
     c54:	f100 8325 	bmi.w	12a2 <usb_isr+0xa2e>
     c58:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
     c5c:	4989      	ldr	r1, [pc, #548]	; (e84 <usb_isr+0x610>)
     c5e:	0610      	lsls	r0, r2, #24
     c60:	f100 8319 	bmi.w	1296 <usb_isr+0xa22>
     c64:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
     c68:	4986      	ldr	r1, [pc, #536]	; (e84 <usb_isr+0x610>)
     c6a:	0612      	lsls	r2, r2, #24
     c6c:	f100 830d 	bmi.w	128a <usb_isr+0xa16>
     c70:	4885      	ldr	r0, [pc, #532]	; (e88 <usb_isr+0x614>)
     c72:	4a86      	ldr	r2, [pc, #536]	; (e8c <usb_isr+0x618>)
     c74:	4986      	ldr	r1, [pc, #536]	; (e90 <usb_isr+0x61c>)
     c76:	9001      	str	r0, [sp, #4]
     c78:	4886      	ldr	r0, [pc, #536]	; (e94 <usb_isr+0x620>)
     c7a:	4d87      	ldr	r5, [pc, #540]	; (e98 <usb_isr+0x624>)
     c7c:	4c87      	ldr	r4, [pc, #540]	; (e9c <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
     c7e:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
     c80:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
     c82:	9605      	str	r6, [sp, #20]
     c84:	9502      	str	r5, [sp, #8]
     c86:	4680      	mov	r8, r0
     c88:	460f      	mov	r7, r1
     c8a:	4616      	mov	r6, r2
     c8c:	461d      	mov	r5, r3
     c8e:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
     c90:	6830      	ldr	r0, [r6, #0]
			while (p) {
     c92:	b128      	cbz	r0, ca0 <usb_isr+0x42c>
				n = p->next;
     c94:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
     c96:	f000 fbe1 	bl	145c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
     c9a:	4620      	mov	r0, r4
     c9c:	2c00      	cmp	r4, #0
     c9e:	d1f9      	bne.n	c94 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
     ca0:	2300      	movs	r3, #0
     ca2:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
     ca4:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
     ca6:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
     ca8:	461a      	mov	r2, r3
     caa:	2300      	movs	r3, #0
     cac:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
     cb0:	b128      	cbz	r0, cbe <usb_isr+0x44a>
				n = p->next;
     cb2:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
     cb4:	f000 fbd2 	bl	145c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
     cb8:	4620      	mov	r0, r4
     cba:	2c00      	cmp	r4, #0
     cbc:	d1f9      	bne.n	cb2 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
     cbe:	2200      	movs	r2, #0
     cc0:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
     cc2:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
     cc4:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
     cc8:	4611      	mov	r1, r2
     cca:	2200      	movs	r2, #0
     ccc:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
     cd0:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
     cd2:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
     cd4:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
     cd6:	f04f 0100 	mov.w	r1, #0
     cda:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
     cde:	2b03      	cmp	r3, #3
     ce0:	f200 812b 	bhi.w	f3a <usb_isr+0x6c6>
     ce4:	e8df f013 	tbh	[pc, r3, lsl #1]
     ce8:	01250170 	.word	0x01250170
     cec:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
     cf0:	f1be 0f40 	cmp.w	lr, #64	; 0x40
     cf4:	bf18      	it	ne
     cf6:	2200      	movne	r2, #0
     cf8:	e6b5      	b.n	a66 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
     cfa:	4a69      	ldr	r2, [pc, #420]	; (ea0 <usb_isr+0x62c>)
     cfc:	780d      	ldrb	r5, [r1, #0]
     cfe:	7848      	ldrb	r0, [r1, #1]
     d00:	7015      	strb	r5, [r2, #0]
     d02:	7050      	strb	r0, [r2, #1]
     d04:	788d      	ldrb	r5, [r1, #2]
     d06:	78c8      	ldrb	r0, [r1, #3]
     d08:	7095      	strb	r5, [r2, #2]
     d0a:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
     d0c:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
     d0e:	790d      	ldrb	r5, [r1, #4]
     d10:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
     d12:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
     d14:	794d      	ldrb	r5, [r1, #5]
     d16:	7989      	ldrb	r1, [r1, #6]
     d18:	7155      	strb	r5, [r2, #5]
     d1a:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
     d1c:	f000 819b 	beq.w	1056 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     d20:	4960      	ldr	r1, [pc, #384]	; (ea4 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     d22:	4e61      	ldr	r6, [pc, #388]	; (ea8 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     d24:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     d26:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
     d28:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     d2c:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     d2e:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
     d32:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     d34:	bf0c      	ite	eq
     d36:	2188      	moveq	r1, #136	; 0x88
     d38:	21c8      	movne	r1, #200	; 0xc8
     d3a:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     d3e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
     d42:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     d46:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
     d48:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     d4a:	6051      	str	r1, [r2, #4]
     d4c:	e69e      	b.n	a8c <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
     d4e:	f242 2021 	movw	r0, #8737	; 0x2221
     d52:	4281      	cmp	r1, r0
     d54:	f040 81cb 	bne.w	10ee <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
     d58:	4b54      	ldr	r3, [pc, #336]	; (eac <usb_isr+0x638>)
     d5a:	4c55      	ldr	r4, [pc, #340]	; (eb0 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
     d5c:	4955      	ldr	r1, [pc, #340]	; (eb4 <usb_isr+0x640>)
     d5e:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
     d60:	681d      	ldr	r5, [r3, #0]
     d62:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
     d64:	f8cd e004 	str.w	lr, [sp, #4]
     d68:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
     d6a:	2000      	movs	r0, #0
     d6c:	9002      	str	r0, [sp, #8]
     d6e:	4680      	mov	r8, r0
     d70:	4684      	mov	ip, r0
     d72:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     d74:	494b      	ldr	r1, [pc, #300]	; (ea4 <usb_isr+0x630>)
     d76:	780d      	ldrb	r5, [r1, #0]
     d78:	f045 0e02 	orr.w	lr, r5, #2
     d7c:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
     d80:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     d82:	9b01      	ldr	r3, [sp, #4]
     d84:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     d86:	9b03      	ldr	r3, [sp, #12]
     d88:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     d8a:	bf0c      	ite	eq
     d8c:	2488      	moveq	r4, #136	; 0x88
     d8e:	24c8      	movne	r4, #200	; 0xc8
     d90:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
     d94:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     d98:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
     d9c:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
     d9e:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     da0:	f8df e0e0 	ldr.w	lr, [pc, #224]	; e84 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
     da4:	4b40      	ldr	r3, [pc, #256]	; (ea8 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
     da6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; ea4 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
     daa:	2800      	cmp	r0, #0
     dac:	f040 811e 	bne.w	fec <usb_isr+0x778>
     db0:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
     db4:	d11b      	bne.n	dee <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     db6:	f044 0c02 	orr.w	ip, r4, #2
     dba:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
     dbe:	9c02      	ldr	r4, [sp, #8]
     dc0:	f8df e0c0 	ldr.w	lr, [pc, #192]	; e84 <usb_isr+0x610>
     dc4:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     dc6:	2a00      	cmp	r2, #0
     dc8:	f040 8126 	bne.w	1018 <usb_isr+0x7a4>
     dcc:	0402      	lsls	r2, r0, #16
     dce:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
     dd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     dd6:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
     dda:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
     ddc:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
     dde:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
     de0:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
     de2:	2840      	cmp	r0, #64	; 0x40
     de4:	d103      	bne.n	dee <usb_isr+0x57a>
     de6:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
     de8:	4a33      	ldr	r2, [pc, #204]	; (eb8 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
     dea:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
     dec:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
     dee:	4a33      	ldr	r2, [pc, #204]	; (ebc <usb_isr+0x648>)
     df0:	2301      	movs	r3, #1
     df2:	7013      	strb	r3, [r2, #0]
     df4:	e64d      	b.n	a92 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
     df6:	f000 fb65 	bl	14c4 <usb_serial_flush_callback>
     dfa:	e5a5      	b.n	948 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
     dfc:	4b21      	ldr	r3, [pc, #132]	; (e84 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
     dfe:	482f      	ldr	r0, [pc, #188]	; (ebc <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
     e00:	4928      	ldr	r1, [pc, #160]	; (ea4 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
     e02:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
     e04:	f04f 0e02 	mov.w	lr, #2
     e08:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
     e0c:	4f2c      	ldr	r7, [pc, #176]	; (ec0 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
     e0e:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
     e10:	492c      	ldr	r1, [pc, #176]	; (ec4 <usb_isr+0x650>)
     e12:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
     e14:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
     e16:	4e2c      	ldr	r6, [pc, #176]	; (ec8 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
     e18:	4d2c      	ldr	r5, [pc, #176]	; (ecc <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
     e1a:	4c2d      	ldr	r4, [pc, #180]	; (ed0 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
     e1c:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
     e1e:	210d      	movs	r1, #13
     e20:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
     e22:	21ff      	movs	r1, #255	; 0xff
     e24:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
     e26:	f8df e0b8 	ldr.w	lr, [pc, #184]	; ee0 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
     e2a:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
     e2c:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
     e2e:	4d29      	ldr	r5, [pc, #164]	; (ed4 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
     e30:	4a29      	ldr	r2, [pc, #164]	; (ed8 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
     e32:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
     e36:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
     e38:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
     e3a:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
     e3e:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
     e40:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
     e42:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
     e44:	b007      	add	sp, #28
     e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
     e4a:	4a24      	ldr	r2, [pc, #144]	; (edc <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
     e4c:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
     e50:	7813      	ldrb	r3, [r2, #0]
     e52:	3301      	adds	r3, #1
     e54:	7013      	strb	r3, [r2, #0]
     e56:	e557      	b.n	908 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
     e58:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
     e5c:	4d0e      	ldr	r5, [pc, #56]	; (e98 <usb_isr+0x624>)
     e5e:	e53a      	b.n	8d6 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
     e60:	5d8b      	ldrb	r3, [r1, r6]
     e62:	2b03      	cmp	r3, #3
     e64:	f200 80f0 	bhi.w	1048 <usb_isr+0x7d4>
     e68:	a201      	add	r2, pc, #4	; (adr r2, e70 <usb_isr+0x5fc>)
     e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e6e:	bf00      	nop
     e70:	00000909 	.word	0x00000909
     e74:	00000909 	.word	0x00000909
     e78:	00000f2d 	.word	0x00000f2d
     e7c:	00000f27 	.word	0x00000f27
     e80:	1fff8cf8 	.word	0x1fff8cf8
     e84:	1fff8000 	.word	0x1fff8000
     e88:	1fff8cd4 	.word	0x1fff8cd4
     e8c:	1fff8c70 	.word	0x1fff8c70
     e90:	1fff8cc4 	.word	0x1fff8cc4
     e94:	1fff8cfc 	.word	0x1fff8cfc
     e98:	1fff8c1c 	.word	0x1fff8c1c
     e9c:	1fff8ebc 	.word	0x1fff8ebc
     ea0:	1fff8ec4 	.word	0x1fff8ec4
     ea4:	1fff8cec 	.word	0x1fff8cec
     ea8:	1fff8c80 	.word	0x1fff8c80
     eac:	1fff8c14 	.word	0x1fff8c14
     eb0:	1fff8ecc 	.word	0x1fff8ecc
     eb4:	1fff8d0c 	.word	0x1fff8d0c
     eb8:	1fff8c2c 	.word	0x1fff8c2c
     ebc:	40072094 	.word	0x40072094
     ec0:	400720c0 	.word	0x400720c0
     ec4:	00400088 	.word	0x00400088
     ec8:	40072088 	.word	0x40072088
     ecc:	40072080 	.word	0x40072080
     ed0:	40072098 	.word	0x40072098
     ed4:	1fff8c30 	.word	0x1fff8c30
     ed8:	1fff8c84 	.word	0x1fff8c84
     edc:	1fff8ced 	.word	0x1fff8ced
     ee0:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
     ee4:	49c1      	ldr	r1, [pc, #772]	; (11ec <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
     ee6:	4bc2      	ldr	r3, [pc, #776]	; (11f0 <usb_isr+0x97c>)
     ee8:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
     eea:	200d      	movs	r0, #13
     eec:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
     eee:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
     ef0:	07a2      	lsls	r2, r4, #30
     ef2:	f57f ae0e 	bpl.w	b12 <usb_isr+0x29e>
     ef6:	e605      	b.n	b04 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
     ef8:	f240 3202 	movw	r2, #770	; 0x302
     efc:	4291      	cmp	r1, r2
     efe:	f040 80ee 	bne.w	10de <usb_isr+0x86a>
     f02:	88a9      	ldrh	r1, [r5, #4]
     f04:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
     f08:	2904      	cmp	r1, #4
     f0a:	d868      	bhi.n	fde <usb_isr+0x76a>
     f0c:	886a      	ldrh	r2, [r5, #2]
     f0e:	2a00      	cmp	r2, #0
     f10:	d165      	bne.n	fde <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
     f12:	48b6      	ldr	r0, [pc, #728]	; (11ec <usb_isr+0x978>)
     f14:	f8cd e004 	str.w	lr, [sp, #4]
     f18:	0089      	lsls	r1, r1, #2
     f1a:	4408      	add	r0, r1
     f1c:	7801      	ldrb	r1, [r0, #0]
     f1e:	f041 0102 	orr.w	r1, r1, #2
     f22:	7001      	strb	r1, [r0, #0]
     f24:	e721      	b.n	d6a <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
     f26:	2301      	movs	r3, #1
     f28:	558b      	strb	r3, [r1, r6]
						break;
     f2a:	e4ed      	b.n	908 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
     f2c:	2300      	movs	r3, #0
     f2e:	558b      	strb	r3, [r1, r6]
						break;
     f30:	e4ea      	b.n	908 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
     f32:	f04f 0301 	mov.w	r3, #1
     f36:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
     f3a:	3501      	adds	r5, #1
     f3c:	2d04      	cmp	r5, #4
     f3e:	f106 0604 	add.w	r6, r6, #4
     f42:	f107 0704 	add.w	r7, r7, #4
     f46:	f108 0801 	add.w	r8, r8, #1
     f4a:	f47f aea1 	bne.w	c90 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
     f4e:	4ca9      	ldr	r4, [pc, #676]	; (11f4 <usb_isr+0x980>)
			*reg = epconf;
     f50:	4ba9      	ldr	r3, [pc, #676]	; (11f8 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
     f52:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
     f54:	4da9      	ldr	r5, [pc, #676]	; (11fc <usb_isr+0x988>)
     f56:	9f04      	ldr	r7, [sp, #16]
     f58:	9e05      	ldr	r6, [sp, #20]
     f5a:	2100      	movs	r1, #0
     f5c:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
     f5e:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f60:	0713      	lsls	r3, r2, #28
     f62:	f100 8105 	bmi.w	1170 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
     f66:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
     f68:	49a5      	ldr	r1, [pc, #660]	; (1200 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f6a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 120c <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
     f6e:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f70:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f72:	f04f 0100 	mov.w	r1, #0
     f76:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
     f7a:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f7e:	f100 80e0 	bmi.w	1142 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
     f82:	49a0      	ldr	r1, [pc, #640]	; (1204 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
     f84:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
     f86:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f88:	2100      	movs	r1, #0
     f8a:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
     f8e:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f92:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f94:	f8df 8274 	ldr.w	r8, [pc, #628]	; 120c <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f98:	f100 8101 	bmi.w	119e <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
     f9c:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
     f9e:	499a      	ldr	r1, [pc, #616]	; (1208 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     fa0:	4c9a      	ldr	r4, [pc, #616]	; (120c <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
     fa2:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     fa4:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     fa6:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     fa8:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
     fac:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     fb0:	f100 80b0 	bmi.w	1114 <usb_isr+0x8a0>
     fb4:	7833      	ldrb	r3, [r6, #0]
     fb6:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     fb8:	2100      	movs	r1, #0
     fba:	f083 0201 	eor.w	r2, r3, #1
     fbe:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
     fc2:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
     fc6:	e6d0      	b.n	d6a <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
     fc8:	f04f 0300 	mov.w	r3, #0
     fcc:	f888 3000 	strb.w	r3, [r8]
     fd0:	e7b3      	b.n	f3a <usb_isr+0x6c6>
     fd2:	88a9      	ldrh	r1, [r5, #4]
     fd4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
     fd8:	2904      	cmp	r1, #4
     fda:	f240 808d 	bls.w	10f8 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
     fde:	4a83      	ldr	r2, [pc, #524]	; (11ec <usb_isr+0x978>)
     fe0:	230f      	movs	r3, #15
     fe2:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
     fe4:	4a8a      	ldr	r2, [pc, #552]	; (1210 <usb_isr+0x99c>)
     fe6:	2301      	movs	r3, #1
     fe8:	7013      	strb	r3, [r2, #0]
     fea:	e552      	b.n	a92 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
     fec:	2840      	cmp	r0, #64	; 0x40
     fee:	f67f aee2 	bls.w	db6 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     ff2:	f044 0402 	orr.w	r4, r4, #2
     ff6:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
     ffa:	9e02      	ldr	r6, [sp, #8]
     ffc:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     ffe:	b1ba      	cbz	r2, 1030 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    1000:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1004:	4a83      	ldr	r2, [pc, #524]	; (1214 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    1006:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1008:	4633      	mov	r3, r6
    100a:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    100c:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1010:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1012:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    1016:	e6e7      	b.n	de8 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    1018:	f89d 3004 	ldrb.w	r3, [sp, #4]
    101c:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    101e:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1020:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    1022:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1024:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1028:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    102a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    102e:	e6d8      	b.n	de2 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    1030:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1034:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1036:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1038:	4a77      	ldr	r2, [pc, #476]	; (1218 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    103a:	f888 5000 	strb.w	r5, [r8]
    103e:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1040:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1042:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    1046:	e6cf      	b.n	de8 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    1048:	f019 0f08 	tst.w	r9, #8
    104c:	bf0c      	ite	eq
    104e:	2302      	moveq	r3, #2
    1050:	2303      	movne	r3, #3
    1052:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    1054:	e458      	b.n	908 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    1056:	4a71      	ldr	r2, [pc, #452]	; (121c <usb_isr+0x9a8>)
    1058:	210f      	movs	r1, #15
    105a:	7011      	strb	r1, [r2, #0]
    105c:	e660      	b.n	d20 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    105e:	4a70      	ldr	r2, [pc, #448]	; (1220 <usb_isr+0x9ac>)
    1060:	6854      	ldr	r4, [r2, #4]
    1062:	2c00      	cmp	r4, #0
    1064:	d0bb      	beq.n	fde <usb_isr+0x76a>
    1066:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1068:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    106c:	e003      	b.n	1076 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    106e:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    1070:	6854      	ldr	r4, [r2, #4]
    1072:	2c00      	cmp	r4, #0
    1074:	d0b3      	beq.n	fde <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1076:	8813      	ldrh	r3, [r2, #0]
    1078:	4283      	cmp	r3, r0
    107a:	d1f8      	bne.n	106e <usb_isr+0x7fa>
    107c:	8853      	ldrh	r3, [r2, #2]
    107e:	4573      	cmp	r3, lr
    1080:	d1f5      	bne.n	106e <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    1082:	0a00      	lsrs	r0, r0, #8
    1084:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    1086:	bf0c      	ite	eq
    1088:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    108c:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    1090:	e003      	b.n	109a <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1092:	4a64      	ldr	r2, [pc, #400]	; (1224 <usb_isr+0x9b0>)
    1094:	4c64      	ldr	r4, [pc, #400]	; (1228 <usb_isr+0x9b4>)
    1096:	7812      	ldrb	r2, [r2, #0]
    1098:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    109a:	88e8      	ldrh	r0, [r5, #6]
    109c:	4570      	cmp	r0, lr
    109e:	f080 813f 	bcs.w	1320 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    10a2:	4962      	ldr	r1, [pc, #392]	; (122c <usb_isr+0x9b8>)
    10a4:	780d      	ldrb	r5, [r1, #0]
    10a6:	2840      	cmp	r0, #64	; 0x40
    10a8:	4684      	mov	ip, r0
    10aa:	f045 0e02 	orr.w	lr, r5, #2
    10ae:	bf28      	it	cs
    10b0:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    10b4:	eb04 030c 	add.w	r3, r4, ip
    10b8:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    10bc:	9302      	str	r3, [sp, #8]
    10be:	2301      	movs	r3, #1
    10c0:	6054      	str	r4, [r2, #4]
    10c2:	ebcc 0000 	rsb	r0, ip, r0
    10c6:	ea4f 480c 	mov.w	r8, ip, lsl #16
    10ca:	2200      	movs	r2, #0
    10cc:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    10ce:	24c8      	movs	r4, #200	; 0xc8
    10d0:	e65e      	b.n	d90 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    10d2:	4c55      	ldr	r4, [pc, #340]	; (1228 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    10d4:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    10d8:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    10da:	7062      	strb	r2, [r4, #1]
    10dc:	e7dd      	b.n	109a <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    10de:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    10e2:	f47f af7c 	bne.w	fde <usb_isr+0x76a>
    10e6:	2301      	movs	r3, #1
    10e8:	2200      	movs	r2, #0
    10ea:	9301      	str	r3, [sp, #4]
    10ec:	e63d      	b.n	d6a <usb_isr+0x4f6>
    10ee:	f242 3221 	movw	r2, #8993	; 0x2321
    10f2:	4291      	cmp	r1, r2
    10f4:	d0f7      	beq.n	10e6 <usb_isr+0x872>
    10f6:	e772      	b.n	fde <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    10f8:	886a      	ldrh	r2, [r5, #2]
    10fa:	2a00      	cmp	r2, #0
    10fc:	f47f af6f 	bne.w	fde <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    1100:	483a      	ldr	r0, [pc, #232]	; (11ec <usb_isr+0x978>)
    1102:	f8cd e004 	str.w	lr, [sp, #4]
    1106:	0089      	lsls	r1, r1, #2
    1108:	4408      	add	r0, r1
    110a:	7801      	ldrb	r1, [r0, #0]
    110c:	f021 0102 	bic.w	r1, r1, #2
    1110:	7001      	strb	r1, [r0, #0]
    1112:	e62a      	b.n	d6a <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    1114:	f000 f982 	bl	141c <usb_malloc>
				if (p) {
    1118:	2800      	cmp	r0, #0
    111a:	f000 80ef 	beq.w	12fc <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    111e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1120:	4a3d      	ldr	r2, [pc, #244]	; (1218 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    1122:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1126:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    112a:	f000 f977 	bl	141c <usb_malloc>
				if (p) {
    112e:	2800      	cmp	r0, #0
    1130:	f000 80de 	beq.w	12f0 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    1134:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1136:	4a37      	ldr	r2, [pc, #220]	; (1214 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    1138:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    113c:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    1140:	e738      	b.n	fb4 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    1142:	f000 f96b 	bl	141c <usb_malloc>
				if (p) {
    1146:	2800      	cmp	r0, #0
    1148:	f000 80c0 	beq.w	12cc <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    114c:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    114e:	4a32      	ldr	r2, [pc, #200]	; (1218 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    1150:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1154:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    1158:	f000 f960 	bl	141c <usb_malloc>
				if (p) {
    115c:	2800      	cmp	r0, #0
    115e:	f000 80af 	beq.w	12c0 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    1162:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1164:	4a2b      	ldr	r2, [pc, #172]	; (1214 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    1166:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    116a:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    116e:	e708      	b.n	f82 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    1170:	f000 f954 	bl	141c <usb_malloc>
				if (p) {
    1174:	2800      	cmp	r0, #0
    1176:	f000 80cd 	beq.w	1314 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    117a:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    117c:	4a26      	ldr	r2, [pc, #152]	; (1218 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    117e:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1182:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    1186:	f000 f949 	bl	141c <usb_malloc>
				if (p) {
    118a:	2800      	cmp	r0, #0
    118c:	f000 80bc 	beq.w	1308 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    1190:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1192:	4a20      	ldr	r2, [pc, #128]	; (1214 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    1194:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1198:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    119c:	e6e3      	b.n	f66 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    119e:	f000 f93d 	bl	141c <usb_malloc>
				if (p) {
    11a2:	2800      	cmp	r0, #0
    11a4:	f000 809e 	beq.w	12e4 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    11a8:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    11aa:	4a1b      	ldr	r2, [pc, #108]	; (1218 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    11ac:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    11b0:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    11b4:	f000 f932 	bl	141c <usb_malloc>
				if (p) {
    11b8:	2800      	cmp	r0, #0
    11ba:	f000 808d 	beq.w	12d8 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    11be:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    11c0:	4a14      	ldr	r2, [pc, #80]	; (1214 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    11c2:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    11c6:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    11ca:	e6e7      	b.n	f9c <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    11cc:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    11ce:	3808      	subs	r0, #8
    11d0:	f000 f944 	bl	145c <usb_free>
    11d4:	e504      	b.n	be0 <usb_isr+0x36c>
    11d6:	6b48      	ldr	r0, [r1, #52]	; 0x34
    11d8:	3808      	subs	r0, #8
    11da:	f000 f93f 	bl	145c <usb_free>
    11de:	e4f9      	b.n	bd4 <usb_isr+0x360>
    11e0:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    11e2:	3808      	subs	r0, #8
    11e4:	f000 f93a 	bl	145c <usb_free>
    11e8:	e4ee      	b.n	bc8 <usb_isr+0x354>
    11ea:	bf00      	nop
    11ec:	400720c0 	.word	0x400720c0
    11f0:	40072080 	.word	0x40072080
    11f4:	00001f04 	.word	0x00001f04
    11f8:	400720c4 	.word	0x400720c4
    11fc:	1fff8ced 	.word	0x1fff8ced
    1200:	400720c8 	.word	0x400720c8
    1204:	400720cc 	.word	0x400720cc
    1208:	400720d0 	.word	0x400720d0
    120c:	1fff8000 	.word	0x1fff8000
    1210:	40072094 	.word	0x40072094
    1214:	004000c8 	.word	0x004000c8
    1218:	00400088 	.word	0x00400088
    121c:	1fff8c81 	.word	0x1fff8c81
    1220:	00001f08 	.word	0x00001f08
    1224:	1fff8cf8 	.word	0x1fff8cf8
    1228:	1fff8cf0 	.word	0x1fff8cf0
    122c:	1fff8cec 	.word	0x1fff8cec
    1230:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1232:	3808      	subs	r0, #8
    1234:	f000 f912 	bl	145c <usb_free>
    1238:	e4c0      	b.n	bbc <usb_isr+0x348>
    123a:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    123c:	3808      	subs	r0, #8
    123e:	f000 f90d 	bl	145c <usb_free>
    1242:	e4fd      	b.n	c40 <usb_isr+0x3cc>
    1244:	6f48      	ldr	r0, [r1, #116]	; 0x74
    1246:	3808      	subs	r0, #8
    1248:	f000 f908 	bl	145c <usb_free>
    124c:	e4f2      	b.n	c34 <usb_isr+0x3c0>
    124e:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    1250:	3808      	subs	r0, #8
    1252:	f000 f903 	bl	145c <usb_free>
    1256:	e4e7      	b.n	c28 <usb_isr+0x3b4>
    1258:	6e48      	ldr	r0, [r1, #100]	; 0x64
    125a:	3808      	subs	r0, #8
    125c:	f000 f8fe 	bl	145c <usb_free>
    1260:	e4dc      	b.n	c1c <usb_isr+0x3a8>
    1262:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    1264:	3808      	subs	r0, #8
    1266:	f000 f8f9 	bl	145c <usb_free>
    126a:	e4d1      	b.n	c10 <usb_isr+0x39c>
    126c:	6d48      	ldr	r0, [r1, #84]	; 0x54
    126e:	3808      	subs	r0, #8
    1270:	f000 f8f4 	bl	145c <usb_free>
    1274:	e4c6      	b.n	c04 <usb_isr+0x390>
    1276:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    1278:	3808      	subs	r0, #8
    127a:	f000 f8ef 	bl	145c <usb_free>
    127e:	e4bb      	b.n	bf8 <usb_isr+0x384>
    1280:	6c48      	ldr	r0, [r1, #68]	; 0x44
    1282:	3808      	subs	r0, #8
    1284:	f000 f8ea 	bl	145c <usb_free>
    1288:	e4b0      	b.n	bec <usb_isr+0x378>
    128a:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    128e:	3808      	subs	r0, #8
    1290:	f000 f8e4 	bl	145c <usb_free>
    1294:	e4ec      	b.n	c70 <usb_isr+0x3fc>
    1296:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    129a:	3808      	subs	r0, #8
    129c:	f000 f8de 	bl	145c <usb_free>
    12a0:	e4e0      	b.n	c64 <usb_isr+0x3f0>
    12a2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    12a6:	3808      	subs	r0, #8
    12a8:	f000 f8d8 	bl	145c <usb_free>
    12ac:	e4d4      	b.n	c58 <usb_isr+0x3e4>
    12ae:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    12b2:	3808      	subs	r0, #8
    12b4:	f000 f8d2 	bl	145c <usb_free>
    12b8:	e4c8      	b.n	c4c <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    12ba:	f04f 0e02 	mov.w	lr, #2
    12be:	e6ec      	b.n	109a <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    12c0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    12c2:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    12c6:	3201      	adds	r2, #1
    12c8:	702a      	strb	r2, [r5, #0]
    12ca:	e65a      	b.n	f82 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    12cc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    12ce:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    12d2:	3201      	adds	r2, #1
    12d4:	702a      	strb	r2, [r5, #0]
    12d6:	e73f      	b.n	1158 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    12d8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    12da:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    12de:	3201      	adds	r2, #1
    12e0:	702a      	strb	r2, [r5, #0]
    12e2:	e65b      	b.n	f9c <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    12e4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    12e6:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    12ea:	3201      	adds	r2, #1
    12ec:	702a      	strb	r2, [r5, #0]
    12ee:	e761      	b.n	11b4 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    12f0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    12f2:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    12f6:	3201      	adds	r2, #1
    12f8:	702a      	strb	r2, [r5, #0]
    12fa:	e65b      	b.n	fb4 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    12fc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    12fe:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    1302:	3201      	adds	r2, #1
    1304:	702a      	strb	r2, [r5, #0]
    1306:	e710      	b.n	112a <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    1308:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    130a:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    130e:	3201      	adds	r2, #1
    1310:	702a      	strb	r2, [r5, #0]
    1312:	e628      	b.n	f66 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    1314:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    1316:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    131a:	3201      	adds	r2, #1
    131c:	702a      	strb	r2, [r5, #0]
    131e:	e732      	b.n	1186 <usb_isr+0x912>
    1320:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    1324:	46f4      	mov	ip, lr
    1326:	bf28      	it	cs
    1328:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    132c:	eb04 030c 	add.w	r3, r4, ip
    1330:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    1332:	2301      	movs	r3, #1
    1334:	ebcc 000e 	rsb	r0, ip, lr
    1338:	ea4f 480c 	mov.w	r8, ip, lsl #16
    133c:	2200      	movs	r2, #0
    133e:	9301      	str	r3, [sp, #4]
    1340:	e518      	b.n	d74 <usb_isr+0x500>
    1342:	bf00      	nop

00001344 <usb_init>:
}



void usb_init(void)
{
    1344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    1346:	f000 fc47 	bl	1bd8 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    134a:	4b29      	ldr	r3, [pc, #164]	; (13f0 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    134c:	4829      	ldr	r0, [pc, #164]	; (13f4 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    134e:	4c2a      	ldr	r4, [pc, #168]	; (13f8 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    1350:	4f2a      	ldr	r7, [pc, #168]	; (13fc <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    1352:	4d2b      	ldr	r5, [pc, #172]	; (1400 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    1354:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1414 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    1358:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 1418 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    135c:	4e29      	ldr	r6, [pc, #164]	; (1404 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    135e:	2200      	movs	r2, #0
    1360:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    1362:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1364:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    1366:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1368:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    136a:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    136c:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    136e:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1370:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    1372:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1374:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    1376:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1378:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    137a:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    137c:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    137e:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1380:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    1382:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1384:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    1386:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1388:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    138a:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    138c:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    138e:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1390:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    1392:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1394:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    1396:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1398:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    139a:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    139c:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    139e:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    13a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    13a4:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    13a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    13aa:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    13ae:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    13b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    13b4:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    13b6:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    13ba:	4913      	ldr	r1, [pc, #76]	; (1408 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    13bc:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    13be:	0e1b      	lsrs	r3, r3, #24
    13c0:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    13c2:	23ff      	movs	r3, #255	; 0xff
    13c4:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    13c8:	4d10      	ldr	r5, [pc, #64]	; (140c <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    13ca:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    13ce:	4810      	ldr	r0, [pc, #64]	; (1410 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    13d0:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    13d2:	2301      	movs	r3, #1
    13d4:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    13d6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    13da:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    13dc:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    13e0:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    13e2:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    13e6:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    13e8:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    13ea:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    13ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13f0:	1fff8000 	.word	0x1fff8000
    13f4:	40048034 	.word	0x40048034
    13f8:	4007209c 	.word	0x4007209c
    13fc:	400720b0 	.word	0x400720b0
    1400:	400720b4 	.word	0x400720b4
    1404:	40072094 	.word	0x40072094
    1408:	40072010 	.word	0x40072010
    140c:	e000e449 	.word	0xe000e449
    1410:	e000e108 	.word	0xe000e108
    1414:	40072080 	.word	0x40072080
    1418:	40072088 	.word	0x40072088

0000141c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    141c:	b672      	cpsid	i
	avail = usb_buffer_available;
    141e:	480d      	ldr	r0, [pc, #52]	; (1454 <usb_malloc+0x38>)
    1420:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1422:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    1426:	2b0b      	cmp	r3, #11
    1428:	dc10      	bgt.n	144c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    142a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    142e:	40d9      	lsrs	r1, r3
    1430:	ea22 0201 	bic.w	r2, r2, r1
    1434:	6002      	str	r2, [r0, #0]
	__enable_irq();
    1436:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1438:	4807      	ldr	r0, [pc, #28]	; (1458 <usb_malloc+0x3c>)
    143a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    143e:	00db      	lsls	r3, r3, #3
    1440:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1442:	2100      	movs	r1, #0
    1444:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    1446:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    1448:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    144a:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    144c:	b662      	cpsie	i
		return NULL;
    144e:	2000      	movs	r0, #0
    1450:	4770      	bx	lr
    1452:	bf00      	nop
    1454:	1fff8720 	.word	0x1fff8720
    1458:	1fff83bc 	.word	0x1fff83bc

0000145c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    145c:	4b0d      	ldr	r3, [pc, #52]	; (1494 <usb_free+0x38>)
    145e:	4a0e      	ldr	r2, [pc, #56]	; (1498 <usb_free+0x3c>)
    1460:	1ac3      	subs	r3, r0, r3
    1462:	fba2 2303 	umull	r2, r3, r2, r3
    1466:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    1468:	2b0b      	cmp	r3, #11
    146a:	d80c      	bhi.n	1486 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    146c:	4a0b      	ldr	r2, [pc, #44]	; (149c <usb_free+0x40>)
    146e:	7812      	ldrb	r2, [r2, #0]
    1470:	b952      	cbnz	r2, 1488 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1472:	b672      	cpsid	i
	usb_buffer_available |= mask;
    1474:	480a      	ldr	r0, [pc, #40]	; (14a0 <usb_free+0x44>)
    1476:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    147a:	6802      	ldr	r2, [r0, #0]
    147c:	fa21 f303 	lsr.w	r3, r1, r3
    1480:	431a      	orrs	r2, r3
    1482:	6002      	str	r2, [r0, #0]
	__enable_irq();
    1484:	b662      	cpsie	i
    1486:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1488:	4a06      	ldr	r2, [pc, #24]	; (14a4 <usb_free+0x48>)
    148a:	7812      	ldrb	r2, [r2, #0]
    148c:	2a00      	cmp	r2, #0
    148e:	d0f0      	beq.n	1472 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    1490:	f7ff b94a 	b.w	728 <usb_rx_memory>
    1494:	1fff83bc 	.word	0x1fff83bc
    1498:	38e38e39 	.word	0x38e38e39
    149c:	1fff8ced 	.word	0x1fff8ced
    14a0:	1fff8720 	.word	0x1fff8720
    14a4:	1fff8cf8 	.word	0x1fff8cf8

000014a8 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    14a8:	4b04      	ldr	r3, [pc, #16]	; (14bc <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    14aa:	4a05      	ldr	r2, [pc, #20]	; (14c0 <usb_serial_available+0x18>)
    14ac:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    14ae:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    14b0:	b11b      	cbz	r3, 14ba <usb_serial_available+0x12>
    14b2:	881a      	ldrh	r2, [r3, #0]
    14b4:	885b      	ldrh	r3, [r3, #2]
    14b6:	1ad3      	subs	r3, r2, r3
    14b8:	4418      	add	r0, r3
	return count;
}
    14ba:	4770      	bx	lr
    14bc:	1fff8d08 	.word	0x1fff8d08
    14c0:	1fff8ebc 	.word	0x1fff8ebc

000014c4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    14c4:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    14c6:	4b0e      	ldr	r3, [pc, #56]	; (1500 <usb_serial_flush_callback+0x3c>)
    14c8:	781b      	ldrb	r3, [r3, #0]
    14ca:	b973      	cbnz	r3, 14ea <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    14cc:	4c0d      	ldr	r4, [pc, #52]	; (1504 <usb_serial_flush_callback+0x40>)
    14ce:	6821      	ldr	r1, [r4, #0]
    14d0:	b161      	cbz	r1, 14ec <usb_serial_flush_callback+0x28>
    14d2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    14d6:	884b      	ldrh	r3, [r1, #2]
    14d8:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    14da:	2004      	movs	r0, #4
    14dc:	f7ff f988 	bl	7f0 <usb_tx>
		tx_packet = NULL;
    14e0:	6025      	str	r5, [r4, #0]
    14e2:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    14e4:	4b08      	ldr	r3, [pc, #32]	; (1508 <usb_serial_flush_callback+0x44>)
    14e6:	2201      	movs	r2, #1
    14e8:	701a      	strb	r2, [r3, #0]
    14ea:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    14ec:	f7ff ff96 	bl	141c <usb_malloc>
		if (tx) {
    14f0:	2800      	cmp	r0, #0
    14f2:	d0f7      	beq.n	14e4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    14f4:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    14f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    14fa:	2004      	movs	r0, #4
    14fc:	f7ff b978 	b.w	7f0 <usb_tx>
    1500:	1fff8d01 	.word	0x1fff8d01
    1504:	1fff8d04 	.word	0x1fff8d04
    1508:	1fff8d00 	.word	0x1fff8d00

0000150c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    150c:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    150e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1512:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    1514:	7f43      	ldrb	r3, [r0, #29]
    1516:	b933      	cbnz	r3, 1526 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    1518:	7f01      	ldrb	r1, [r0, #28]
    151a:	2901      	cmp	r1, #1
    151c:	d007      	beq.n	152e <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    151e:	2903      	cmp	r1, #3
    1520:	d00f      	beq.n	1542 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    1522:	2301      	movs	r3, #1
    1524:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1526:	b902      	cbnz	r2, 152a <EventResponder::triggerEventNotImmediate()+0x1e>
    1528:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    152a:	bc10      	pop	{r4}
    152c:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    152e:	4c12      	ldr	r4, [pc, #72]	; (1578 <EventResponder::triggerEventNotImmediate()+0x6c>)
    1530:	6821      	ldr	r1, [r4, #0]
    1532:	b1a1      	cbz	r1, 155e <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    1534:	4911      	ldr	r1, [pc, #68]	; (157c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    1536:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    1538:	680b      	ldr	r3, [r1, #0]
    153a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    153c:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    153e:	6158      	str	r0, [r3, #20]
    1540:	e7ef      	b.n	1522 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    1542:	4c0f      	ldr	r4, [pc, #60]	; (1580 <EventResponder::triggerEventNotImmediate()+0x74>)
    1544:	6821      	ldr	r1, [r4, #0]
    1546:	b181      	cbz	r1, 156a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    1548:	490e      	ldr	r1, [pc, #56]	; (1584 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    154a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    154c:	680b      	ldr	r3, [r1, #0]
    154e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    1550:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    1552:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    1554:	4b0c      	ldr	r3, [pc, #48]	; (1588 <EventResponder::triggerEventNotImmediate()+0x7c>)
    1556:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    155a:	6019      	str	r1, [r3, #0]
    155c:	e7e1      	b.n	1522 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    155e:	4b07      	ldr	r3, [pc, #28]	; (157c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    1560:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    1562:	6181      	str	r1, [r0, #24]
				firstYield = this;
    1564:	6020      	str	r0, [r4, #0]
				lastYield = this;
    1566:	6018      	str	r0, [r3, #0]
    1568:	e7db      	b.n	1522 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    156a:	4b06      	ldr	r3, [pc, #24]	; (1584 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    156c:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    156e:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    1570:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    1572:	6018      	str	r0, [r3, #0]
    1574:	e7ee      	b.n	1554 <EventResponder::triggerEventNotImmediate()+0x48>
    1576:	bf00      	nop
    1578:	1fff8d20 	.word	0x1fff8d20
    157c:	1fff8d1c 	.word	0x1fff8d1c
    1580:	1fff8d10 	.word	0x1fff8d10
    1584:	1fff8d14 	.word	0x1fff8d14
    1588:	e000ed04 	.word	0xe000ed04

0000158c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    158c:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    158e:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1590:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1592:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1594:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1596:	d002      	beq.n	159e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1598:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    159a:	f7ff bfb7 	b.w	150c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    159e:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    15a0:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    15a2:	4718      	bx	r3

000015a4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    15a4:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    15a6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    15aa:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    15ac:	4c0c      	ldr	r4, [pc, #48]	; (15e0 <EventResponder::runFromInterrupt()+0x3c>)
    15ae:	6820      	ldr	r0, [r4, #0]
		if (first) {
    15b0:	b180      	cbz	r0, 15d4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    15b2:	4e0c      	ldr	r6, [pc, #48]	; (15e4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    15b4:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    15b6:	6943      	ldr	r3, [r0, #20]
    15b8:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    15ba:	b173      	cbz	r3, 15da <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    15bc:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    15be:	b902      	cbnz	r2, 15c2 <EventResponder::runFromInterrupt()+0x1e>
    15c0:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    15c2:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    15c4:	6883      	ldr	r3, [r0, #8]
    15c6:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    15c8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    15cc:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    15ce:	6820      	ldr	r0, [r4, #0]
		if (first) {
    15d0:	2800      	cmp	r0, #0
    15d2:	d1f0      	bne.n	15b6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    15d4:	b902      	cbnz	r2, 15d8 <EventResponder::runFromInterrupt()+0x34>
    15d6:	b662      	cpsie	i
    15d8:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    15da:	6033      	str	r3, [r6, #0]
    15dc:	e7ef      	b.n	15be <EventResponder::runFromInterrupt()+0x1a>
    15de:	bf00      	nop
    15e0:	1fff8d10 	.word	0x1fff8d10
    15e4:	1fff8d14 	.word	0x1fff8d14

000015e8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    15e8:	f7ff bfdc 	b.w	15a4 <EventResponder::runFromInterrupt()>

000015ec <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    15ec:	4a18      	ldr	r2, [pc, #96]	; (1650 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    15ee:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    15f0:	6814      	ldr	r4, [r2, #0]
    15f2:	2c00      	cmp	r4, #0
    15f4:	d027      	beq.n	1646 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    15f6:	6803      	ldr	r3, [r0, #0]
    15f8:	6821      	ldr	r1, [r4, #0]
    15fa:	428b      	cmp	r3, r1
    15fc:	d20e      	bcs.n	161c <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    15fe:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    1600:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    1602:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    1604:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    1606:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    1608:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    160a:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    160c:	2302      	movs	r3, #2
    160e:	7503      	strb	r3, [r0, #20]
}
    1610:	bc30      	pop	{r4, r5}
    1612:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    1614:	6811      	ldr	r1, [r2, #0]
    1616:	428b      	cmp	r3, r1
    1618:	4614      	mov	r4, r2
    161a:	d308      	bcc.n	162e <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    161c:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    161e:	1a5b      	subs	r3, r3, r1
    1620:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    1622:	2a00      	cmp	r2, #0
    1624:	d1f6      	bne.n	1614 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    1626:	6082      	str	r2, [r0, #8]
		_prev = timer;
    1628:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    162a:	60a0      	str	r0, [r4, #8]
    162c:	e7ee      	b.n	160c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    162e:	68d2      	ldr	r2, [r2, #12]
    1630:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    1632:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    1634:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    1636:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    1638:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    163a:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    163c:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    163e:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    1640:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    1642:	bc30      	pop	{r4, r5}
    1644:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    1646:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    1648:	60c4      	str	r4, [r0, #12]
		listActive = this;
    164a:	6010      	str	r0, [r2, #0]
    164c:	e7de      	b.n	160c <MillisTimer::addToActiveList()+0x20>
    164e:	bf00      	nop
    1650:	1fff8d18 	.word	0x1fff8d18

00001654 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    1654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    1656:	4e22      	ldr	r6, [pc, #136]	; (16e0 <MillisTimer::runFromTimer()+0x8c>)
    1658:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    165a:	b32c      	cbz	r4, 16a8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    165c:	6823      	ldr	r3, [r4, #0]
    165e:	2b00      	cmp	r3, #0
    1660:	d13a      	bne.n	16d8 <MillisTimer::runFromTimer()+0x84>
    1662:	4f20      	ldr	r7, [pc, #128]	; (16e4 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    1664:	461d      	mov	r5, r3
    1666:	e004      	b.n	1672 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    1668:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    166a:	b1ec      	cbz	r4, 16a8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    166c:	6823      	ldr	r3, [r4, #0]
    166e:	2b00      	cmp	r3, #0
    1670:	d132      	bne.n	16d8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    1672:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    1674:	b103      	cbz	r3, 1678 <MillisTimer::runFromTimer()+0x24>
    1676:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    1678:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    167a:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    167c:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    167e:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1680:	681b      	ldr	r3, [r3, #0]
    1682:	42bb      	cmp	r3, r7
    1684:	d121      	bne.n	16ca <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1686:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1688:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    168a:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    168c:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    168e:	d020      	beq.n	16d2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1690:	f7ff ff3c 	bl	150c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    1694:	6863      	ldr	r3, [r4, #4]
    1696:	2b00      	cmp	r3, #0
    1698:	d0e6      	beq.n	1668 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    169a:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    169c:	4620      	mov	r0, r4
    169e:	f7ff ffa5 	bl	15ec <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    16a2:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    16a4:	2c00      	cmp	r4, #0
    16a6:	d1e1      	bne.n	166c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    16a8:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    16ac:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    16ae:	4a0e      	ldr	r2, [pc, #56]	; (16e8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    16b0:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    16b2:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    16b4:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    16b6:	b903      	cbnz	r3, 16ba <MillisTimer::runFromTimer()+0x66>
    16b8:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    16ba:	b128      	cbz	r0, 16c8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    16bc:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    16be:	f7ff ff95 	bl	15ec <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    16c2:	4620      	mov	r0, r4
    16c4:	2800      	cmp	r0, #0
    16c6:	d1f9      	bne.n	16bc <MillisTimer::runFromTimer()+0x68>
    16c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    16ca:	4622      	mov	r2, r4
    16cc:	2100      	movs	r1, #0
    16ce:	4798      	blx	r3
    16d0:	e7e0      	b.n	1694 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    16d2:	6883      	ldr	r3, [r0, #8]
    16d4:	4798      	blx	r3
    16d6:	e7dd      	b.n	1694 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    16d8:	3b01      	subs	r3, #1
    16da:	6023      	str	r3, [r4, #0]
			break;
    16dc:	e7e4      	b.n	16a8 <MillisTimer::runFromTimer()+0x54>
    16de:	bf00      	nop
    16e0:	1fff8d18 	.word	0x1fff8d18
    16e4:	0000158d 	.word	0x0000158d
    16e8:	1fff8d28 	.word	0x1fff8d28

000016ec <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    16ec:	4a02      	ldr	r2, [pc, #8]	; (16f8 <systick_isr+0xc>)
    16ee:	6813      	ldr	r3, [r2, #0]
    16f0:	3301      	adds	r3, #1
    16f2:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    16f4:	f7ff bfae 	b.w	1654 <MillisTimer::runFromTimer()>
    16f8:	1fff8c14 	.word	0x1fff8c14

000016fc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    16fc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    16fe:	f7fe feb5 	bl	46c <setup>
	while (1) {
		loop();
    1702:	f7fe feb7 	bl	474 <loop>
		yield();
    1706:	f000 f801 	bl	170c <yield>
    170a:	e7fa      	b.n	1702 <main+0x6>

0000170c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    170c:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    170e:	4c22      	ldr	r4, [pc, #136]	; (1798 <yield+0x8c>)
    1710:	7823      	ldrb	r3, [r4, #0]
    1712:	b103      	cbz	r3, 1716 <yield+0xa>
    1714:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    1716:	2301      	movs	r3, #1
    1718:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    171a:	f7ff fec5 	bl	14a8 <usb_serial_available>
	if (Serial.available()) serialEvent();
    171e:	bb70      	cbnz	r0, 177e <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    1720:	f000 f8b2 	bl	1888 <serial_available>
	if (Serial1.available()) serialEvent1();
    1724:	bb40      	cbnz	r0, 1778 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    1726:	f000 f945 	bl	19b4 <serial2_available>
	if (Serial2.available()) serialEvent2();
    172a:	bb10      	cbnz	r0, 1772 <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    172c:	f000 f9d8 	bl	1ae0 <serial3_available>
	if (Serial3.available()) serialEvent3();
    1730:	b9e0      	cbnz	r0, 176c <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    1732:	2300      	movs	r3, #0
    1734:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1736:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    173a:	2b00      	cmp	r3, #0
    173c:	d1ea      	bne.n	1714 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    173e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1742:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    1744:	4b15      	ldr	r3, [pc, #84]	; (179c <yield+0x90>)
    1746:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    1748:	b1e0      	cbz	r0, 1784 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    174a:	4c15      	ldr	r4, [pc, #84]	; (17a0 <yield+0x94>)
    174c:	7822      	ldrb	r2, [r4, #0]
    174e:	b9ca      	cbnz	r2, 1784 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    1750:	6945      	ldr	r5, [r0, #20]
    1752:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1754:	2301      	movs	r3, #1
    1756:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    1758:	b1c5      	cbz	r5, 178c <yield+0x80>
			firstYield->_prev = nullptr;
    175a:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    175c:	b901      	cbnz	r1, 1760 <yield+0x54>
    175e:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1760:	2500      	movs	r5, #0
    1762:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    1764:	6883      	ldr	r3, [r0, #8]
    1766:	4798      	blx	r3
		runningFromYield = false;
    1768:	7025      	strb	r5, [r4, #0]
    176a:	e7d3      	b.n	1714 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    176c:	f000 fa7a 	bl	1c64 <serialEvent3()>
    1770:	e7df      	b.n	1732 <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    1772:	f000 fa75 	bl	1c60 <serialEvent2()>
    1776:	e7d9      	b.n	172c <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    1778:	f000 fa70 	bl	1c5c <serialEvent1()>
    177c:	e7d3      	b.n	1726 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    177e:	f000 fa73 	bl	1c68 <serialEvent()>
    1782:	e7cd      	b.n	1720 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1784:	2900      	cmp	r1, #0
    1786:	d1c5      	bne.n	1714 <yield+0x8>
    1788:	b662      	cpsie	i
    178a:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    178c:	4b05      	ldr	r3, [pc, #20]	; (17a4 <yield+0x98>)
    178e:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1790:	2900      	cmp	r1, #0
    1792:	d1e5      	bne.n	1760 <yield+0x54>
    1794:	e7e3      	b.n	175e <yield+0x52>
    1796:	bf00      	nop
    1798:	1fff8d2c 	.word	0x1fff8d2c
    179c:	1fff8d20 	.word	0x1fff8d20
    17a0:	1fff8d24 	.word	0x1fff8d24
    17a4:	1fff8d1c 	.word	0x1fff8d1c

000017a8 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    17a8:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    17aa:	4829      	ldr	r0, [pc, #164]	; (1850 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    17ac:	4a29      	ldr	r2, [pc, #164]	; (1854 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    17ae:	4b2a      	ldr	r3, [pc, #168]	; (1858 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    17b0:	4d2a      	ldr	r5, [pc, #168]	; (185c <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    17b2:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    17b4:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    17b6:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    17b8:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    17ba:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    17bc:	4c28      	ldr	r4, [pc, #160]	; (1860 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    17be:	2b08      	cmp	r3, #8
    17c0:	d030      	beq.n	1824 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    17c2:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    17c4:	4827      	ldr	r0, [pc, #156]	; (1864 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    17c6:	4928      	ldr	r1, [pc, #160]	; (1868 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    17c8:	d037      	beq.n	183a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    17ca:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    17cc:	bf0c      	ite	eq
    17ce:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    17d0:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    17d2:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    17d4:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    17d6:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    17d8:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    17da:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    17dc:	4b23      	ldr	r3, [pc, #140]	; (186c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    17de:	4924      	ldr	r1, [pc, #144]	; (1870 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    17e0:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    17e2:	4a24      	ldr	r2, [pc, #144]	; (1874 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    17e4:	b1bb      	cbz	r3, 1816 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    17e6:	2301      	movs	r3, #1
    17e8:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    17ea:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    17ec:	4b22      	ldr	r3, [pc, #136]	; (1878 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    17ee:	4923      	ldr	r1, [pc, #140]	; (187c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    17f0:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    17f2:	4a23      	ldr	r2, [pc, #140]	; (1880 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    17f4:	2b01      	cmp	r3, #1
    17f6:	d926      	bls.n	1846 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    17f8:	2b04      	cmp	r3, #4
    17fa:	d90f      	bls.n	181c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    17fc:	2b08      	cmp	r3, #8
    17fe:	d91e      	bls.n	183e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1800:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1802:	bf94      	ite	ls
    1804:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1806:	2387      	movhi	r3, #135	; 0x87
    1808:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    180a:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    180c:	4b1d      	ldr	r3, [pc, #116]	; (1884 <analog_init+0xdc>)
    180e:	2201      	movs	r2, #1
    1810:	701a      	strb	r2, [r3, #0]
}
    1812:	bc30      	pop	{r4, r5}
    1814:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1816:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1818:	6013      	str	r3, [r2, #0]
    181a:	e7e7      	b.n	17ec <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    181c:	2384      	movs	r3, #132	; 0x84
    181e:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1820:	6013      	str	r3, [r2, #0]
    1822:	e7f3      	b.n	180c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1824:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1828:	490f      	ldr	r1, [pc, #60]	; (1868 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    182a:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    182c:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    182e:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1830:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1832:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1834:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1836:	600b      	str	r3, [r1, #0]
    1838:	e7d0      	b.n	17dc <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    183a:	2239      	movs	r2, #57	; 0x39
    183c:	e7f7      	b.n	182e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    183e:	2385      	movs	r3, #133	; 0x85
    1840:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1842:	6013      	str	r3, [r2, #0]
    1844:	e7e2      	b.n	180c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1846:	2380      	movs	r3, #128	; 0x80
    1848:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    184a:	6013      	str	r3, [r2, #0]
    184c:	e7de      	b.n	180c <analog_init+0x64>
    184e:	bf00      	nop
    1850:	40074000 	.word	0x40074000
    1854:	40074001 	.word	0x40074001
    1858:	1fff8724 	.word	0x1fff8724
    185c:	4003b008 	.word	0x4003b008
    1860:	4003b00c 	.word	0x4003b00c
    1864:	400bb008 	.word	0x400bb008
    1868:	400bb00c 	.word	0x400bb00c
    186c:	1fff8d2e 	.word	0x1fff8d2e
    1870:	4003b020 	.word	0x4003b020
    1874:	400bb020 	.word	0x400bb020
    1878:	1fff8725 	.word	0x1fff8725
    187c:	4003b024 	.word	0x4003b024
    1880:	400bb024 	.word	0x400bb024
    1884:	1fff8d2d 	.word	0x1fff8d2d

00001888 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1888:	4a05      	ldr	r2, [pc, #20]	; (18a0 <serial_available+0x18>)
	tail = rx_buffer_tail;
    188a:	4b06      	ldr	r3, [pc, #24]	; (18a4 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    188c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    188e:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1890:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    1892:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    1894:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    1896:	bf38      	it	cc
    1898:	3040      	addcc	r0, #64	; 0x40
    189a:	1ac0      	subs	r0, r0, r3
}
    189c:	4770      	bx	lr
    189e:	bf00      	nop
    18a0:	1fff8d34 	.word	0x1fff8d34
    18a4:	1fff8d35 	.word	0x1fff8d35

000018a8 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    18a8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    18aa:	4b38      	ldr	r3, [pc, #224]	; (198c <uart0_status_isr+0xe4>)
    18ac:	791a      	ldrb	r2, [r3, #4]
    18ae:	f012 0f30 	tst.w	r2, #48	; 0x30
    18b2:	d02c      	beq.n	190e <uart0_status_isr+0x66>
		__disable_irq();
    18b4:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    18b6:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    18b8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    18bc:	2900      	cmp	r1, #0
    18be:	d03d      	beq.n	193c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    18c0:	b662      	cpsie	i
			head = rx_buffer_head;
    18c2:	4f33      	ldr	r7, [pc, #204]	; (1990 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    18c4:	4933      	ldr	r1, [pc, #204]	; (1994 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    18c6:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    18c8:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    18ca:	4e33      	ldr	r6, [pc, #204]	; (1998 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    18cc:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    18ce:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    18d0:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    18d2:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    18d4:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    18d6:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    18d8:	bf28      	it	cs
    18da:	2300      	movcs	r3, #0
				if (newhead != tail) {
    18dc:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    18de:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    18e2:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    18e4:	bf1c      	itt	ne
    18e6:	54f1      	strbne	r1, [r6, r3]
    18e8:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    18ea:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    18ee:	d1f0      	bne.n	18d2 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    18f0:	4b2a      	ldr	r3, [pc, #168]	; (199c <uart0_status_isr+0xf4>)
    18f2:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    18f4:	b2c2      	uxtb	r2, r0
    18f6:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    18f8:	b14b      	cbz	r3, 190e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    18fa:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    18fc:	bf36      	itet	cc
    18fe:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    1902:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    1904:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    1906:	2827      	cmp	r0, #39	; 0x27
    1908:	bfc4      	itt	gt
    190a:	2201      	movgt	r2, #1
    190c:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    190e:	491f      	ldr	r1, [pc, #124]	; (198c <uart0_status_isr+0xe4>)
    1910:	78ca      	ldrb	r2, [r1, #3]
    1912:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    1914:	0615      	lsls	r5, r2, #24
    1916:	d416      	bmi.n	1946 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    1918:	0652      	lsls	r2, r2, #25
    191a:	d50d      	bpl.n	1938 <uart0_status_isr+0x90>
    191c:	4b1b      	ldr	r3, [pc, #108]	; (198c <uart0_status_isr+0xe4>)
    191e:	791b      	ldrb	r3, [r3, #4]
    1920:	065b      	lsls	r3, r3, #25
    1922:	d509      	bpl.n	1938 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    1924:	4b1e      	ldr	r3, [pc, #120]	; (19a0 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    1926:	491f      	ldr	r1, [pc, #124]	; (19a4 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    1928:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    192a:	2200      	movs	r2, #0
    192c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    192e:	b103      	cbz	r3, 1932 <uart0_status_isr+0x8a>
    1930:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    1932:	4b16      	ldr	r3, [pc, #88]	; (198c <uart0_status_isr+0xe4>)
    1934:	223c      	movs	r2, #60	; 0x3c
    1936:	70da      	strb	r2, [r3, #3]
	}
}
    1938:	bcf0      	pop	{r4, r5, r6, r7}
    193a:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    193c:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    193e:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    1940:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    1942:	b662      	cpsie	i
    1944:	e7e3      	b.n	190e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    1946:	790b      	ldrb	r3, [r1, #4]
    1948:	061c      	lsls	r4, r3, #24
    194a:	d5e5      	bpl.n	1918 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    194c:	4b16      	ldr	r3, [pc, #88]	; (19a8 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    194e:	4e17      	ldr	r6, [pc, #92]	; (19ac <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1950:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    1952:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1954:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    1956:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    1958:	429c      	cmp	r4, r3
    195a:	d00e      	beq.n	197a <uart0_status_isr+0xd2>
    195c:	4d14      	ldr	r5, [pc, #80]	; (19b0 <uart0_status_isr+0x108>)
    195e:	e001      	b.n	1964 <uart0_status_isr+0xbc>
    1960:	42a3      	cmp	r3, r4
    1962:	d00a      	beq.n	197a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    1964:	3301      	adds	r3, #1
    1966:	2b40      	cmp	r3, #64	; 0x40
    1968:	bf28      	it	cs
    196a:	2300      	movcs	r3, #0
			avail = UART0_S1;
    196c:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    196e:	5ce8      	ldrb	r0, [r5, r3]
    1970:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    1972:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    1974:	7d08      	ldrb	r0, [r1, #20]
    1976:	2807      	cmp	r0, #7
    1978:	d9f2      	bls.n	1960 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    197a:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    197c:	4903      	ldr	r1, [pc, #12]	; (198c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    197e:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    1980:	790b      	ldrb	r3, [r1, #4]
    1982:	0618      	lsls	r0, r3, #24
    1984:	bf44      	itt	mi
    1986:	237c      	movmi	r3, #124	; 0x7c
    1988:	70cb      	strbmi	r3, [r1, #3]
    198a:	e7c5      	b.n	1918 <uart0_status_isr+0x70>
    198c:	4006a000 	.word	0x4006a000
    1990:	1fff8d34 	.word	0x1fff8d34
    1994:	1fff8d35 	.word	0x1fff8d35
    1998:	1fff8d78 	.word	0x1fff8d78
    199c:	1fff8d30 	.word	0x1fff8d30
    19a0:	1fff8dbc 	.word	0x1fff8dbc
    19a4:	1fff8db8 	.word	0x1fff8db8
    19a8:	1fff8dc0 	.word	0x1fff8dc0
    19ac:	1fff8db9 	.word	0x1fff8db9
    19b0:	1fff8d38 	.word	0x1fff8d38

000019b4 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    19b4:	4a05      	ldr	r2, [pc, #20]	; (19cc <serial2_available+0x18>)
	tail = rx_buffer_tail;
    19b6:	4b06      	ldr	r3, [pc, #24]	; (19d0 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    19b8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    19ba:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    19bc:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    19be:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    19c0:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    19c2:	bf38      	it	cc
    19c4:	3040      	addcc	r0, #64	; 0x40
    19c6:	1ac0      	subs	r0, r0, r3
}
    19c8:	4770      	bx	lr
    19ca:	bf00      	nop
    19cc:	1fff8e34 	.word	0x1fff8e34
    19d0:	1fff8dc9 	.word	0x1fff8dc9

000019d4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    19d4:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    19d6:	4b38      	ldr	r3, [pc, #224]	; (1ab8 <uart1_status_isr+0xe4>)
    19d8:	791a      	ldrb	r2, [r3, #4]
    19da:	f012 0f30 	tst.w	r2, #48	; 0x30
    19de:	d02c      	beq.n	1a3a <uart1_status_isr+0x66>
		__disable_irq();
    19e0:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    19e2:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    19e4:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    19e8:	2900      	cmp	r1, #0
    19ea:	d03d      	beq.n	1a68 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    19ec:	b662      	cpsie	i
			head = rx_buffer_head;
    19ee:	4f33      	ldr	r7, [pc, #204]	; (1abc <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    19f0:	4933      	ldr	r1, [pc, #204]	; (1ac0 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    19f2:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    19f4:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    19f6:	4e33      	ldr	r6, [pc, #204]	; (1ac4 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    19f8:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    19fa:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    19fc:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    19fe:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    1a00:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    1a02:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    1a04:	bf28      	it	cs
    1a06:	2300      	movcs	r3, #0
				if (newhead != tail) {
    1a08:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    1a0a:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    1a0e:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    1a10:	bf1c      	itt	ne
    1a12:	54f1      	strbne	r1, [r6, r3]
    1a14:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    1a16:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    1a1a:	d1f0      	bne.n	19fe <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    1a1c:	4b2a      	ldr	r3, [pc, #168]	; (1ac8 <uart1_status_isr+0xf4>)
    1a1e:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    1a20:	b2c2      	uxtb	r2, r0
    1a22:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    1a24:	b14b      	cbz	r3, 1a3a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    1a26:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    1a28:	bf36      	itet	cc
    1a2a:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    1a2e:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    1a30:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    1a32:	2827      	cmp	r0, #39	; 0x27
    1a34:	bfc4      	itt	gt
    1a36:	2201      	movgt	r2, #1
    1a38:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    1a3a:	491f      	ldr	r1, [pc, #124]	; (1ab8 <uart1_status_isr+0xe4>)
    1a3c:	78ca      	ldrb	r2, [r1, #3]
    1a3e:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    1a40:	0615      	lsls	r5, r2, #24
    1a42:	d416      	bmi.n	1a72 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    1a44:	0652      	lsls	r2, r2, #25
    1a46:	d50d      	bpl.n	1a64 <uart1_status_isr+0x90>
    1a48:	4b1b      	ldr	r3, [pc, #108]	; (1ab8 <uart1_status_isr+0xe4>)
    1a4a:	791b      	ldrb	r3, [r3, #4]
    1a4c:	065b      	lsls	r3, r3, #25
    1a4e:	d509      	bpl.n	1a64 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    1a50:	4b1e      	ldr	r3, [pc, #120]	; (1acc <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    1a52:	491f      	ldr	r1, [pc, #124]	; (1ad0 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    1a54:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    1a56:	2200      	movs	r2, #0
    1a58:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    1a5a:	b103      	cbz	r3, 1a5e <uart1_status_isr+0x8a>
    1a5c:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    1a5e:	4b16      	ldr	r3, [pc, #88]	; (1ab8 <uart1_status_isr+0xe4>)
    1a60:	223c      	movs	r2, #60	; 0x3c
    1a62:	70da      	strb	r2, [r3, #3]
	}
}
    1a64:	bcf0      	pop	{r4, r5, r6, r7}
    1a66:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    1a68:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    1a6a:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    1a6c:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    1a6e:	b662      	cpsie	i
    1a70:	e7e3      	b.n	1a3a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    1a72:	790b      	ldrb	r3, [r1, #4]
    1a74:	061c      	lsls	r4, r3, #24
    1a76:	d5e5      	bpl.n	1a44 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    1a78:	4b16      	ldr	r3, [pc, #88]	; (1ad4 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    1a7a:	4e17      	ldr	r6, [pc, #92]	; (1ad8 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1a7c:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    1a7e:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1a80:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    1a82:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    1a84:	429c      	cmp	r4, r3
    1a86:	d00e      	beq.n	1aa6 <uart1_status_isr+0xd2>
    1a88:	4d14      	ldr	r5, [pc, #80]	; (1adc <uart1_status_isr+0x108>)
    1a8a:	e001      	b.n	1a90 <uart1_status_isr+0xbc>
    1a8c:	42a3      	cmp	r3, r4
    1a8e:	d00a      	beq.n	1aa6 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    1a90:	3301      	adds	r3, #1
    1a92:	2b28      	cmp	r3, #40	; 0x28
    1a94:	bf28      	it	cs
    1a96:	2300      	movcs	r3, #0
			avail = UART1_S1;
    1a98:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    1a9a:	5ce8      	ldrb	r0, [r5, r3]
    1a9c:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    1a9e:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    1aa0:	7d08      	ldrb	r0, [r1, #20]
    1aa2:	2807      	cmp	r0, #7
    1aa4:	d9f2      	bls.n	1a8c <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    1aa6:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    1aa8:	4903      	ldr	r1, [pc, #12]	; (1ab8 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    1aaa:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    1aac:	790b      	ldrb	r3, [r1, #4]
    1aae:	0618      	lsls	r0, r3, #24
    1ab0:	bf44      	itt	mi
    1ab2:	237c      	movmi	r3, #124	; 0x7c
    1ab4:	70cb      	strbmi	r3, [r1, #3]
    1ab6:	e7c5      	b.n	1a44 <uart1_status_isr+0x70>
    1ab8:	4006b000 	.word	0x4006b000
    1abc:	1fff8e34 	.word	0x1fff8e34
    1ac0:	1fff8dc9 	.word	0x1fff8dc9
    1ac4:	1fff8df4 	.word	0x1fff8df4
    1ac8:	1fff8dc4 	.word	0x1fff8dc4
    1acc:	1fff8e38 	.word	0x1fff8e38
    1ad0:	1fff8dc8 	.word	0x1fff8dc8
    1ad4:	1fff8e3c 	.word	0x1fff8e3c
    1ad8:	1fff8e35 	.word	0x1fff8e35
    1adc:	1fff8dcc 	.word	0x1fff8dcc

00001ae0 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ae0:	4a05      	ldr	r2, [pc, #20]	; (1af8 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    1ae2:	4b06      	ldr	r3, [pc, #24]	; (1afc <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ae4:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    1ae6:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ae8:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    1aea:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    1aec:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    1aee:	bf38      	it	cc
    1af0:	3040      	addcc	r0, #64	; 0x40
    1af2:	1ac0      	subs	r0, r0, r3
}
    1af4:	4770      	bx	lr
    1af6:	bf00      	nop
    1af8:	1fff8e44 	.word	0x1fff8e44
    1afc:	1fff8e45 	.word	0x1fff8e45

00001b00 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    1b00:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    1b02:	4b2b      	ldr	r3, [pc, #172]	; (1bb0 <uart2_status_isr+0xb0>)
    1b04:	791a      	ldrb	r2, [r3, #4]
    1b06:	0694      	lsls	r4, r2, #26
    1b08:	d51f      	bpl.n	1b4a <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    1b0a:	482a      	ldr	r0, [pc, #168]	; (1bb4 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    1b0c:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    1b0e:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1b10:	4929      	ldr	r1, [pc, #164]	; (1bb8 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    1b12:	3301      	adds	r3, #1
    1b14:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1b16:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    1b18:	bfc8      	it	gt
    1b1a:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1b1c:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    1b1e:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1b20:	d003      	beq.n	1b2a <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    1b22:	4c26      	ldr	r4, [pc, #152]	; (1bbc <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    1b24:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    1b26:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    1b28:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    1b2a:	4a25      	ldr	r2, [pc, #148]	; (1bc0 <uart2_status_isr+0xc0>)
    1b2c:	6811      	ldr	r1, [r2, #0]
    1b2e:	b161      	cbz	r1, 1b4a <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    1b30:	4a24      	ldr	r2, [pc, #144]	; (1bc4 <uart2_status_isr+0xc4>)
    1b32:	7812      	ldrb	r2, [r2, #0]
    1b34:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    1b36:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    1b38:	bf36      	itet	cc
    1b3a:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    1b3e:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    1b40:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    1b42:	2b27      	cmp	r3, #39	; 0x27
    1b44:	bfc4      	itt	gt
    1b46:	2301      	movgt	r3, #1
    1b48:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    1b4a:	4a19      	ldr	r2, [pc, #100]	; (1bb0 <uart2_status_isr+0xb0>)
    1b4c:	78d3      	ldrb	r3, [r2, #3]
    1b4e:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    1b50:	0618      	lsls	r0, r3, #24
    1b52:	d411      	bmi.n	1b78 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    1b54:	065a      	lsls	r2, r3, #25
    1b56:	d50d      	bpl.n	1b74 <uart2_status_isr+0x74>
    1b58:	4b15      	ldr	r3, [pc, #84]	; (1bb0 <uart2_status_isr+0xb0>)
    1b5a:	791b      	ldrb	r3, [r3, #4]
    1b5c:	065b      	lsls	r3, r3, #25
    1b5e:	d509      	bpl.n	1b74 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    1b60:	4b19      	ldr	r3, [pc, #100]	; (1bc8 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    1b62:	491a      	ldr	r1, [pc, #104]	; (1bcc <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    1b64:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    1b66:	2200      	movs	r2, #0
    1b68:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    1b6a:	b103      	cbz	r3, 1b6e <uart2_status_isr+0x6e>
    1b6c:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    1b6e:	4b10      	ldr	r3, [pc, #64]	; (1bb0 <uart2_status_isr+0xb0>)
    1b70:	222c      	movs	r2, #44	; 0x2c
    1b72:	70da      	strb	r2, [r3, #3]
	}
}
    1b74:	bc30      	pop	{r4, r5}
    1b76:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    1b78:	7911      	ldrb	r1, [r2, #4]
    1b7a:	0609      	lsls	r1, r1, #24
    1b7c:	d5ea      	bpl.n	1b54 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    1b7e:	4914      	ldr	r1, [pc, #80]	; (1bd0 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    1b80:	4810      	ldr	r0, [pc, #64]	; (1bc4 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1b82:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    1b84:	7801      	ldrb	r1, [r0, #0]
    1b86:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    1b88:	428c      	cmp	r4, r1
    1b8a:	d00d      	beq.n	1ba8 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    1b8c:	1c4a      	adds	r2, r1, #1
    1b8e:	2a27      	cmp	r2, #39	; 0x27
    1b90:	bf84      	itt	hi
    1b92:	2100      	movhi	r1, #0
    1b94:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    1b96:	4d0f      	ldr	r5, [pc, #60]	; (1bd4 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    1b98:	4c05      	ldr	r4, [pc, #20]	; (1bb0 <uart2_status_isr+0xb0>)
    1b9a:	bf98      	it	ls
    1b9c:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    1b9e:	5caa      	ldrb	r2, [r5, r2]
    1ba0:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    1ba2:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    1ba4:	7001      	strb	r1, [r0, #0]
    1ba6:	e7d5      	b.n	1b54 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    1ba8:	216c      	movs	r1, #108	; 0x6c
    1baa:	70d1      	strb	r1, [r2, #3]
    1bac:	e7d2      	b.n	1b54 <uart2_status_isr+0x54>
    1bae:	bf00      	nop
    1bb0:	4006c000 	.word	0x4006c000
    1bb4:	1fff8e44 	.word	0x1fff8e44
    1bb8:	1fff8e45 	.word	0x1fff8e45
    1bbc:	1fff8e70 	.word	0x1fff8e70
    1bc0:	1fff8e40 	.word	0x1fff8e40
    1bc4:	1fff8eb1 	.word	0x1fff8eb1
    1bc8:	1fff8eb4 	.word	0x1fff8eb4
    1bcc:	1fff8eb0 	.word	0x1fff8eb0
    1bd0:	1fff8eb8 	.word	0x1fff8eb8
    1bd4:	1fff8e48 	.word	0x1fff8e48

00001bd8 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1bd8:	b570      	push	{r4, r5, r6, lr}
    1bda:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    1bdc:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    1bde:	4b19      	ldr	r3, [pc, #100]	; (1c44 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    1be0:	4d19      	ldr	r5, [pc, #100]	; (1c48 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    1be2:	481a      	ldr	r0, [pc, #104]	; (1c4c <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    1be4:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    1be6:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    1be8:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1bea:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    1bec:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    1bee:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    1bf0:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    1bf2:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1bf4:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    1bf6:	7813      	ldrb	r3, [r2, #0]
    1bf8:	061b      	lsls	r3, r3, #24
    1bfa:	d5fc      	bpl.n	1bf6 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    1bfc:	4b14      	ldr	r3, [pc, #80]	; (1c50 <usb_init_serialnumber+0x78>)
    1bfe:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    1c00:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1c02:	4b14      	ldr	r3, [pc, #80]	; (1c54 <usb_init_serialnumber+0x7c>)
    1c04:	4c14      	ldr	r4, [pc, #80]	; (1c58 <usb_init_serialnumber+0x80>)
    1c06:	4298      	cmp	r0, r3
    1c08:	bf98      	it	ls
    1c0a:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    1c0e:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1c10:	bf98      	it	ls
    1c12:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    1c14:	220a      	movs	r2, #10
    1c16:	f000 f829 	bl	1c6c <ultoa>
    1c1a:	a901      	add	r1, sp, #4
    1c1c:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    1c1e:	2300      	movs	r3, #0
		char c = buf[i];
    1c20:	f811 2b01 	ldrb.w	r2, [r1], #1
    1c24:	3301      	adds	r3, #1
		if (!c) break;
    1c26:	b13a      	cbz	r2, 1c38 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1c28:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    1c2a:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    1c2e:	d1f7      	bne.n	1c20 <usb_init_serialnumber+0x48>
    1c30:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1c32:	7023      	strb	r3, [r4, #0]
}
    1c34:	b004      	add	sp, #16
    1c36:	bd70      	pop	{r4, r5, r6, pc}
    1c38:	005b      	lsls	r3, r3, #1
    1c3a:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1c3c:	7023      	strb	r3, [r4, #0]
}
    1c3e:	b004      	add	sp, #16
    1c40:	bd70      	pop	{r4, r5, r6, pc}
    1c42:	bf00      	nop
    1c44:	40020000 	.word	0x40020000
    1c48:	40020007 	.word	0x40020007
    1c4c:	40020006 	.word	0x40020006
    1c50:	40020008 	.word	0x40020008
    1c54:	0098967f 	.word	0x0098967f
    1c58:	1fff87b4 	.word	0x1fff87b4

00001c5c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    1c5c:	4770      	bx	lr
    1c5e:	bf00      	nop

00001c60 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    1c60:	4770      	bx	lr
    1c62:	bf00      	nop

00001c64 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    1c64:	4770      	bx	lr
    1c66:	bf00      	nop

00001c68 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    1c68:	4770      	bx	lr
    1c6a:	bf00      	nop

00001c6c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    1c6c:	b4f0      	push	{r4, r5, r6, r7}
    1c6e:	1e4d      	subs	r5, r1, #1
    1c70:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    1c72:	2400      	movs	r4, #0
    1c74:	e000      	b.n	1c78 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    1c76:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    1c78:	fbb0 f3f2 	udiv	r3, r0, r2
    1c7c:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1c80:	2809      	cmp	r0, #9
    1c82:	f100 0730 	add.w	r7, r0, #48	; 0x30
    1c86:	bf8a      	itet	hi
    1c88:	3037      	addhi	r0, #55	; 0x37
    1c8a:	b2f8      	uxtbls	r0, r7
    1c8c:	b2c0      	uxtbhi	r0, r0
    1c8e:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    1c92:	4618      	mov	r0, r3
    1c94:	2b00      	cmp	r3, #0
    1c96:	d1ee      	bne.n	1c76 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    1c98:	190a      	adds	r2, r1, r4
    1c9a:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    1c9c:	b14c      	cbz	r4, 1cb2 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    1c9e:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    1ca0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    1ca4:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1ca6:	3301      	adds	r3, #1
    1ca8:	1ae0      	subs	r0, r4, r3
    1caa:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    1cac:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    1cb0:	dbf5      	blt.n	1c9e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    1cb2:	4608      	mov	r0, r1
    1cb4:	bcf0      	pop	{r4, r5, r6, r7}
    1cb6:	4770      	bx	lr

00001cb8 <__libc_init_array>:
    1cb8:	b570      	push	{r4, r5, r6, lr}
    1cba:	4e0f      	ldr	r6, [pc, #60]	; (1cf8 <__libc_init_array+0x40>)
    1cbc:	4d0f      	ldr	r5, [pc, #60]	; (1cfc <__libc_init_array+0x44>)
    1cbe:	1b76      	subs	r6, r6, r5
    1cc0:	10b6      	asrs	r6, r6, #2
    1cc2:	bf18      	it	ne
    1cc4:	2400      	movne	r4, #0
    1cc6:	d005      	beq.n	1cd4 <__libc_init_array+0x1c>
    1cc8:	3401      	adds	r4, #1
    1cca:	f855 3b04 	ldr.w	r3, [r5], #4
    1cce:	4798      	blx	r3
    1cd0:	42a6      	cmp	r6, r4
    1cd2:	d1f9      	bne.n	1cc8 <__libc_init_array+0x10>
    1cd4:	4e0a      	ldr	r6, [pc, #40]	; (1d00 <__libc_init_array+0x48>)
    1cd6:	4d0b      	ldr	r5, [pc, #44]	; (1d04 <__libc_init_array+0x4c>)
    1cd8:	1b76      	subs	r6, r6, r5
    1cda:	f000 f941 	bl	1f60 <_init>
    1cde:	10b6      	asrs	r6, r6, #2
    1ce0:	bf18      	it	ne
    1ce2:	2400      	movne	r4, #0
    1ce4:	d006      	beq.n	1cf4 <__libc_init_array+0x3c>
    1ce6:	3401      	adds	r4, #1
    1ce8:	f855 3b04 	ldr.w	r3, [r5], #4
    1cec:	4798      	blx	r3
    1cee:	42a6      	cmp	r6, r4
    1cf0:	d1f9      	bne.n	1ce6 <__libc_init_array+0x2e>
    1cf2:	bd70      	pop	{r4, r5, r6, pc}
    1cf4:	bd70      	pop	{r4, r5, r6, pc}
    1cf6:	bf00      	nop
    1cf8:	00001f6c 	.word	0x00001f6c
    1cfc:	00001f6c 	.word	0x00001f6c
    1d00:	00001f74 	.word	0x00001f74
    1d04:	00001f6c 	.word	0x00001f6c

00001d08 <register_fini>:
    1d08:	4b02      	ldr	r3, [pc, #8]	; (1d14 <register_fini+0xc>)
    1d0a:	b113      	cbz	r3, 1d12 <register_fini+0xa>
    1d0c:	4802      	ldr	r0, [pc, #8]	; (1d18 <register_fini+0x10>)
    1d0e:	f000 b805 	b.w	1d1c <atexit>
    1d12:	4770      	bx	lr
    1d14:	00000000 	.word	0x00000000
    1d18:	00001d29 	.word	0x00001d29

00001d1c <atexit>:
    1d1c:	2300      	movs	r3, #0
    1d1e:	4601      	mov	r1, r0
    1d20:	461a      	mov	r2, r3
    1d22:	4618      	mov	r0, r3
    1d24:	f000 b814 	b.w	1d50 <__register_exitproc>

00001d28 <__libc_fini_array>:
    1d28:	b538      	push	{r3, r4, r5, lr}
    1d2a:	4d07      	ldr	r5, [pc, #28]	; (1d48 <__libc_fini_array+0x20>)
    1d2c:	4c07      	ldr	r4, [pc, #28]	; (1d4c <__libc_fini_array+0x24>)
    1d2e:	1b2c      	subs	r4, r5, r4
    1d30:	10a4      	asrs	r4, r4, #2
    1d32:	d005      	beq.n	1d40 <__libc_fini_array+0x18>
    1d34:	3c01      	subs	r4, #1
    1d36:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    1d3a:	4798      	blx	r3
    1d3c:	2c00      	cmp	r4, #0
    1d3e:	d1f9      	bne.n	1d34 <__libc_fini_array+0xc>
    1d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1d44:	f000 b916 	b.w	1f74 <__init_array_end>
	...

00001d50 <__register_exitproc>:
    1d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d54:	4c25      	ldr	r4, [pc, #148]	; (1dec <__register_exitproc+0x9c>)
    1d56:	6825      	ldr	r5, [r4, #0]
    1d58:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    1d5c:	4606      	mov	r6, r0
    1d5e:	4688      	mov	r8, r1
    1d60:	4692      	mov	sl, r2
    1d62:	4699      	mov	r9, r3
    1d64:	b3c4      	cbz	r4, 1dd8 <__register_exitproc+0x88>
    1d66:	6860      	ldr	r0, [r4, #4]
    1d68:	281f      	cmp	r0, #31
    1d6a:	dc17      	bgt.n	1d9c <__register_exitproc+0x4c>
    1d6c:	1c43      	adds	r3, r0, #1
    1d6e:	b176      	cbz	r6, 1d8e <__register_exitproc+0x3e>
    1d70:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    1d74:	2201      	movs	r2, #1
    1d76:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    1d7a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    1d7e:	4082      	lsls	r2, r0
    1d80:	4311      	orrs	r1, r2
    1d82:	2e02      	cmp	r6, #2
    1d84:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    1d88:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    1d8c:	d01e      	beq.n	1dcc <__register_exitproc+0x7c>
    1d8e:	3002      	adds	r0, #2
    1d90:	6063      	str	r3, [r4, #4]
    1d92:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    1d96:	2000      	movs	r0, #0
    1d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d9c:	4b14      	ldr	r3, [pc, #80]	; (1df0 <__register_exitproc+0xa0>)
    1d9e:	b303      	cbz	r3, 1de2 <__register_exitproc+0x92>
    1da0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1da4:	f3af 8000 	nop.w
    1da8:	4604      	mov	r4, r0
    1daa:	b1d0      	cbz	r0, 1de2 <__register_exitproc+0x92>
    1dac:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    1db0:	2700      	movs	r7, #0
    1db2:	e880 0088 	stmia.w	r0, {r3, r7}
    1db6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    1dba:	4638      	mov	r0, r7
    1dbc:	2301      	movs	r3, #1
    1dbe:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    1dc2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    1dc6:	2e00      	cmp	r6, #0
    1dc8:	d0e1      	beq.n	1d8e <__register_exitproc+0x3e>
    1dca:	e7d1      	b.n	1d70 <__register_exitproc+0x20>
    1dcc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    1dd0:	430a      	orrs	r2, r1
    1dd2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    1dd6:	e7da      	b.n	1d8e <__register_exitproc+0x3e>
    1dd8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    1ddc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    1de0:	e7c1      	b.n	1d66 <__register_exitproc+0x16>
    1de2:	f04f 30ff 	mov.w	r0, #4294967295
    1de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1dea:	bf00      	nop
    1dec:	00001f5c 	.word	0x00001f5c
    1df0:	00000000 	.word	0x00000000

00001df4 <digital_pin_to_info_PGM>:
    1df4:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    1e04:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    1e14:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    1e24:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    1e34:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    1e44:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    1e54:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    1e64:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    1e74:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    1e84:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    1e94:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    1ea4:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    1eb4:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
    1ec4:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
    1ed4:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
    1ee4:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
    1ef4:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

00001f04 <usb_endpoint_config_table>:
    1f04:	15191500                                ....

00001f08 <usb_descriptor_list>:
    1f08:	00000100 1fff8728 00000012 00000200     ....(...........
    1f18:	1fff8754 00000043 00000300 1fff87b0     T...C...........
    1f28:	00000000 04090301 1fff873c 00000000     ........<.......
    1f38:	04090302 1fff8798 00000000 04090303     ................
    1f48:	1fff87b4 00000000 00000000 00000000     ................
    1f58:	00000000                                ....

00001f5c <_global_impure_ptr>:
    1f5c:	1fff87d0                                ....

00001f60 <_init>:
    1f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f62:	bf00      	nop
    1f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f66:	bc08      	pop	{r3}
    1f68:	469e      	mov	lr, r3
    1f6a:	4770      	bx	lr

00001f6c <__init_array_start>:
    1f6c:	00001d09 	.word	0x00001d09

00001f70 <__frame_dummy_init_array_entry>:
    1f70:	00000435                                5...

Disassembly of section .fini:

00001f74 <_fini>:
    1f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f76:	bf00      	nop
